{"version":3,"sources":["views/tables/data-tables/basic/AdminComponent/Settings/MrchntCmsnTable.js","views/tables/data-tables/basic/AdminComponent/Settings/CostSettings.js","views/viewhelper.js","views/helper.js","views/tables/data-tables/basic/AdminComponent/ClientSideDataTable.js"],"names":["withReactContent","Swal","CostSettings","_useState","useState","_useState2","_slicedToArray","CostManageLoading","setCostManage","_useState3","_useState4","per_sms_cost","setper_sms_cost","_useState5","_useState6","_useState7","_useState8","adCostLoading","setadCostLoading","_useState9","_useState10","setcommission_percentage","_useState11","_useState12","_useState13","_useState14","setMerchantLists","_useState15","_useState16","_useState17","_useState18","_useState19","_useState20","setTableDataLoading","_useState21","_useState22","TableDataRefresh","_useState23","_useState24","setMerchantCmsnList","_useState25","sms_cost","sms_charge","email_charge","push_notification_charge","facebook_post_charge","push_notification_amount","instagram_post_charge","_useState26","adCost","setAdCost","adCostONchange","e","_objectSpread","_defineProperty","target","name","parseInt","value","useEffect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","useJwt","getAdCost","then","response","data","payload","catch","error","Error","console","log","getSmsRate","_response$data$payloa","get_global_commission_rate","_response$data$payloa2","commission_percentage","customerBusinessList","res","map","x","id","label","businessname","err","stop","_callee2","_context2","get_merchant_commission_rate","page","limit","rows","_jsxs","Fragment","children","Card","_jsx","CardHeader","className","CardTitle","CardBody","Form","style","width","onSubmit","preventDefault","adCostUpdate","Success","autoComplete","Row","Col","sm","FormGroup","Label","Input","type","min","step","onChange","required","placeholder","paddingTop","Button","Ripple","color","disabled","Spinner","size","updateSmsRate","toFixed","status","toast","message","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","success","options","year","month","day","hour","minute","formatReadableDate","date","Date","toLocaleDateString","thousandSeparator","toString","replace","handle401","_ref","window","location","href","localStorage","clear","_x","apply","arguments","ExportCSV","array","CSVname","link","document","createElement","csv","result","join","forEach","item","ctr","key","convertArrayOfObjectsToCSV","userData","JSON","parse","getItem","filename","concat","toISOString","replaceAll","match","setAttribute","encodeURI","click","CommonDataTable","column","TableData","TableDataLoading","currentPage","setCurrentPage","DataTable","noHeader","pagination","columns","paginationPerPage","sortIcon","ChevronDown","paginationDefaultPage","paginationComponent","ReactPaginate","previousLabel","nextLabel","forcePage","onPageChange","selected","handlePagination","pageCount","length","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","progressPending","progressComponent","responsive","pointerOnHover","highlightOnHover","striped"],"mappings":"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","file":"static/js/357.b17886b9.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState, useRef } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput, Modal, ModalHeader, ModalBody\n} from 'reactstrap'\nimport { Link, useHistory } from 'react-router-dom'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { Error, Success, ErrorMessage } from '../../../../../viewhelper'\nimport { formatReadableDate } from '../../../../../helper'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst MySwal = withReactContent(Swal)\nimport CommonDataTable from '../ClientSideDataTable'\nimport Select from 'react-select'\nimport { selectThemeColors, transformInToFormObject } from '@utils'\nimport 'jspdf-autotable'\n\nconst MrchntCmsnTable = ({ TableDataLoading, MerchantCmsnList, setMerchantCmsnList, setTableDataRefresh }) => {\n    const AssignedMenus = JSON.parse(localStorage.getItem('AssignedMenus')) || []\n    const Array2D = AssignedMenus.map(x => x.submenu.map(y => y.id))\n    const subMenuIDs = [].concat(...Array2D)\n\n    const [modal, setmodal] = useState(false)\n    const toggleModal = () => setmodal(m => !m)\n\n    const [rowID, setrowID] = useState(0)\n    const [MerchantList, setMerchantLists] = useState([])\n    const [SelectedMerchantList, setSelectedMerchantList] = useState([])\n    const [SelectedMerchantLoading, setSelectedMerchantLoading] = useState(false)\n    const [merchant_commission_percentage, setmerchant_commission_percentage] = useState(1)\n\n    useEffect(async () => {\n        await useJwt.customerBusinessList().then(res => {\n            const { payload } = res.data\n            console.log(payload)\n            setMerchantLists(payload.map(x => { return { value: x.id, label: x.businessname } }))\n        }).catch(err => {\n            console.log(err.response)\n            Error(err)\n        })\n    }, [])\n\n    const handlePoPupActions = (id, message = 'Do you want to delete?') => {\n        // localStorage.setItem('useBMStoken', true)\n        return MySwal.fire({\n            title: message,\n            text: ``,\n            icon: 'warning',\n            allowOutsideClick: false,\n            allowEscapeKey: false,\n            showCancelButton: true,\n            confirmButtonText: 'Yes',\n            customClass: {\n                confirmButton: 'btn btn-primary',\n                cancelButton: 'btn btn-danger ml-1'\n            },\n            showLoaderOnConfirm: true,\n            preConfirm: () => {\n                return useJwt.delete_merchant_commission_rate({ id }).then(res => {\n                    setMerchantCmsnList(x => x.filter(y => y.id !== id))\n                    Success(res)\n                    console.log(res)\n                }).catch(err => {\n                    console.log(err.response)\n                    Error(err)\n                })\n            },\n            buttonsStyling: false,\n            allowOutsideClick: () => !Swal.isLoading()\n        }).then(function (result) {\n            if (result.isConfirmed) {\n            }\n        })\n\n    }\n    const [searchValue, setSearchValue] = useState('')\n    const [filteredData, setFilteredData] = useState([])\n\n    const column = [\n        {\n            name: 'Merchant Name',\n            minWidth: '250px',\n            sortable: true,\n            selector: row => row.merchant_name?.toString()\n        },\n        {\n            name: 'Commission Percentage',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'commission_percentage'\n        },\n        {\n            name: 'Created By',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'created_by'\n        },\n        {\n            name: 'Created At',\n            minWidth: '100px',\n            sortable: true,\n            selector: row => formatReadableDate(row.created_at)\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n            // sortable: true,\n            selector: row => {\n                return <>\n                    <span title=\"Edit\">\n                        <Edit size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                setrowID(row.id)\n                                setmerchant_commission_percentage(row.commission_percentage)\n                                console.log(MerchantList.filter(merchant => row.merchant_id.includes(merchant.value)))\n                                setSelectedMerchantList(MerchantList.filter(merchant => row.merchant_id.includes(merchant.value)))\n                                toggleModal()\n                            }}\n                        />\n                    </span>&nbsp;&nbsp;\n                    <span title=\"Edit\">\n                        <Trash size={15}\n                            color='crimson'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                handlePoPupActions(row.id)\n                            }}\n                        />\n                    </span>&nbsp;&nbsp;\n                </>\n            }\n        }\n    ]\n\n\n    const onSelectedMerchantSubmit = (e) => {\n        e.preventDefault()\n        const body = {\n            id: rowID,\n            merchant_id: SelectedMerchantList.map(x => x.value),\n            merchant_name: SelectedMerchantList.map(x => x.label),\n            commission_percentage: +merchant_commission_percentage\n        }\n        console.log(body)\n        // return 0\n        setSelectedMerchantLoading(true)\n        useJwt.edit_merchant_commission_rate(body).then((response) => {\n            setTableDataRefresh(r => !r)\n            setSelectedMerchantLoading(false)\n            Success(response)\n            toggleModal()\n        }).catch((error) => {\n            setSelectedMerchantLoading(false)\n            Error(error)\n            console.log(error)\n        })\n    }\n    return (\n        <>\n            <CommonDataTable column={column} TableData={searchValue.length ? filteredData : MerchantCmsnList} TableDataLoading={TableDataLoading} />\n            <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\n                <ModalHeader toggle={toggleModal}>Edit Merchant Based Commission</ModalHeader>\n                <ModalBody>\n                    <Form style={{ width: '100%' }} onSubmit={onSelectedMerchantSubmit} autoComplete=\"off\">\n                        <Row>\n                            <Col md='12'>\n                                <FormGroup>\n                                    <Label>Select Merchants</Label>\n                                    <Select\n                                        theme={selectThemeColors}\n                                        className='react-select'\n                                        classNamePrefix='select'\n                                        name=\"\"\n                                        maxMenuHeight={100}\n                                        value={SelectedMerchantList}\n                                        onChange={(selected) => {\n                                            setSelectedMerchantList(selected)\n                                        }}\n                                        options={MerchantList}\n                                        isClearable\n                                        isMulti\n                                        isLoading={false}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            {\n                                !!SelectedMerchantList.length && <Col md='12'>\n                                    <FormGroup>\n                                        <Label>Commission (%) </Label>\n                                        <Input\n                                            type=\"number\"\n                                            min={0}\n                                            max={100}\n                                            step='0.01'\n                                            name={merchant_commission_percentage}\n                                            id={merchant_commission_percentage}\n                                            value={merchant_commission_percentage}\n                                            onChange={e => {\n                                                setmerchant_commission_percentage(e.target.value)\n                                            }}\n                                            required\n                                            placeholder=\"1\"\n                                        />\n                                    </FormGroup>\n                                </Col>\n                            }\n                            {!!SelectedMerchantList.length && <Col md='12' className='text-center' style={{ paddingTop: '23px' }}>\n                                {\n                                    SelectedMerchantLoading ? <Button.Ripple color='primary' className='mr-1' disabled>\n                                        <Spinner color='white' size='sm' />\n                                        <span className='ml-50'>Loading...</span>\n                                    </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\">\n                                        <span >Submit</span>\n                                    </Button.Ripple>\n                                }\n                            </Col>}\n                        </Row>\n                    </Form>\n                </ModalBody>\n            </Modal>\n        </>\n    )\n}\n\nexport default MrchntCmsnTable","import React, { Fragment, useEffect, useMemo, useState } from 'react'\nimport axios from 'axios'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody\n} from 'reactstrap'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { Error, Success, ErrorMessage } from '../../../../../viewhelper'\nimport { Link, useHistory } from 'react-router-dom'\nimport { toast } from 'react-toastify'\nimport Select from 'react-select'\nimport { selectThemeColors, transformInToFormObject } from '@utils'\nimport MrchntCmsnTable from './MrchntCmsnTable'\n\nconst CostSettings = () => {\n    const [CostManageLoading, setCostManage] = useState(false)\n    const [per_sms_cost, setper_sms_cost] = useState(1)\n\n    const [commission_percentageLoading, setcommission_percentageLoading] = useState(false)\n    const [adCostLoading, setadCostLoading] = useState(false)\n    const [commission_percentage, setcommission_percentage] = useState(1)\n    const [merchant_commission_percentage, setmerchant_commission_percentage] = useState(1)\n\n    const [MerchantList, setMerchantLists] = useState([])\n    const [SelectedMerchantList, setSelectedMerchantList] = useState([])\n    const [SelectedMerchantLoading, setSelectedMerchantLoading] = useState(false)\n    const [TableDataLoading, setTableDataLoading] = useState(true)\n    const [TableDataRefresh, setTableDataRefresh] = useState(true)\n    const [MerchantCmsnList, setMerchantCmsnList] = useState([])\n    const [adCost, setAdCost] = useState({\n       sms_cost: 0,\n       sms_charge:0,\n       email_charge:0,\n       push_notification_charge:0,\n       facebook_post_charge:0,\n       push_notification_amount:0,\n       instagram_post_charge:0\n    })\n    const adCostONchange = (e) => {\n        setAdCost({...adCost, [e.target.name]: parseInt(e.target.value)})\n    }\n\n    useEffect(async () => {\n        await useJwt.getAdCost().then((response) => {\n            setAdCost({ ...response.data.payload })\n        }).catch((error) => {\n            Error(error)\n            console.log(error)\n        })\n        await useJwt.getSmsRate().then((response) => {\n            // console.log(response.data.payload)\n            setper_sms_cost(response.data.payload?.per_sms_cost)\n        }).catch((error) => {\n            Error(error)\n            console.log(error)\n        })\n        await useJwt.get_global_commission_rate().then((response) => {\n            // console.log(response.data.payload)\n            setcommission_percentage(response.data.payload?.commission_percentage)\n        }).catch((error) => {\n            Error(error)\n            console.log(error)\n        })\n        await useJwt.customerBusinessList().then(res => {\n            const { payload } = res.data\n            // console.log(payload)\n            setMerchantLists(payload.map(x => { return { value: x.id, label: x.businessname } }))\n        }).catch(err => {\n            console.log(err.response)\n            Error(err)\n        })\n    }, [])\n    useEffect(async () => {\n        await useJwt.get_merchant_commission_rate({ page: 1, limit: 100 }).then(res => {\n            console.log('get_merchant_commission_rate', res.data.payload)\n            setMerchantCmsnList(res.data.payload.rows)\n            setTableDataLoading(false)\n        }).catch(err => {\n            console.log(err.response)\n            Error(err)\n        })\n    }, [TableDataRefresh])\n    const onCostConfSubmit = (e) => {\n        e.preventDefault()\n        // console.log({ id: 1, per_sms_cost: +((+per_sms_cost).toFixed(2)) })\n        // return 0\n        setCostManage(true)\n        useJwt.updateSmsRate({ id: 1, per_sms_cost: +((+per_sms_cost).toFixed(2)) }).then((response) => {\n            setCostManage(false)\n            Success(response)\n        }).catch((error) => {\n            setCostManage(false)\n            Error(error)\n            console.log(error)\n        })\n    }\n    const onGCSubmit = (e) => {\n        e.preventDefault()\n        // console.log({ id: 2, commission_percentage: +((+commission_percentage).toFixed(2)) })\n        // return 0\n        setcommission_percentageLoading(true)\n        useJwt.edit_global_commission_rate({ id: 2, commission_percentage: +((+commission_percentage).toFixed(2)) }).then((response) => {\n            setcommission_percentageLoading(false)\n            Success(response)\n        }).catch((error) => {\n            setcommission_percentageLoading(false)\n            Error(error)\n            console.log(error)\n        })\n    }\n    const onAdCostSubmit = (e) => {\n        e.preventDefault()\n        setadCostLoading(true)\n        useJwt.adCostUpdate({ ...adCost }).then((response) => {\n            setadCostLoading(false)\n            Success(response)\n        }).catch((error) => {\n            setadCostLoading(false)\n            Error(error)\n            console.log(error)\n        })\n    }\n    const onSelectedMerchantSubmit = (e) => {\n        e.preventDefault()\n        const body = {\n            merchant_id: SelectedMerchantList.map(x => x.value),\n            merchant_name: SelectedMerchantList.map(x => x.label),\n            commission_percentage: +merchant_commission_percentage\n        }\n        console.log(body)\n        // return 0\n        setSelectedMerchantLoading(true)\n        useJwt.create_merchant_commission_rate(body).then((response) => {\n            setSelectedMerchantLoading(false)\n            Success(response)\n            setTableDataRefresh(r => !r)\n        }).catch((error) => {\n            setSelectedMerchantLoading(false)\n            Error(error)\n            console.log(error)\n        })\n    }\n    return (\n        <Fragment>\n            <Card>\n                <CardHeader className='border-bottom'>\n                    <CardTitle>\n                        Ad Cost Configuration\n                    </CardTitle>\n                </CardHeader>\n                <CardBody>\n                    <Form style={{ width: '100%' }} onSubmit={onAdCostSubmit} autoComplete=\"off\">\n                        <Row>\n                            <Col sm='4'>\n                                <FormGroup>\n                                    <Label>SMS Cost</Label>\n                                    <Input\n                                        type=\"number\"\n                                        min={0}\n                                        step='0.01'\n                                        name=\"sms_cost\"\n                                        id='sms_cost'\n                                        value={adCost?.sms_cost}\n                                        onChange={adCostONchange}\n                                        required\n                                        placeholder=\"1\"\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm='4'>\n                                <FormGroup>\n                                    <Label>SMS Charge</Label>\n                                    <Input\n                                        type=\"number\"\n                                        min={0}\n                                        step='0.01'\n                                        name=\"sms_charge\"\n                                        id='sms_charge'\n                                        value={adCost?.sms_charge}\n                                        onChange={adCostONchange}\n                                        required\n                                        placeholder=\"1\"\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm='4'>\n                                <FormGroup>\n                                    <Label>Email Charge</Label>\n                                    <Input\n                                        type=\"number\"\n                                        min={0}\n                                        step='0.01'\n                                        name=\"email_charge\"\n                                        id='email_charge'\n                                        value={adCost?.email_charge}\n                                        onChange={adCostONchange}\n                                        required\n                                        placeholder=\"1\"\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm='4'>\n                                <FormGroup>\n                                    <Label>Push Notification Charge</Label>\n                                    <Input\n                                        type=\"number\"\n                                        min={0}\n                                        step='0.01'\n                                        name=\"push_notification_charge\"\n                                        id='push_notification_charge'\n                                        value={adCost?.push_notification_charge}\n                                        onChange={adCostONchange}\n                                        required\n                                        placeholder=\"1\"\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm='4'>\n                                <FormGroup>\n                                    <Label>Push Notification Amount</Label>\n                                    <Input\n                                        type=\"number\"\n                                        min={0}\n                                        name=\"push_notification_amount\"\n                                        id='push_notification_amount'\n                                        value={adCost?.push_notification_amount}\n                                        onChange={adCostONchange}\n                                        required\n                                        placeholder=\"1\"\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm='4'>\n                                <FormGroup>\n                                    <Label>Facebook Post Charge</Label>\n                                    <Input\n                                        type=\"number\"\n                                        min={0}\n                                        step='0.01'\n                                        name=\"facebook_post_charge\"\n                                        id='facebook_post_charge'\n                                        value={adCost?.facebook_post_charge}\n                                        onChange={adCostONchange}\n                                        required\n                                        placeholder=\"1\"\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm='4'>\n                                <FormGroup>\n                                    <Label>Instagram Post Charge</Label>\n                                    <Input\n                                        type=\"number\"\n                                        min={0}\n                                        step='0.01'\n                                        name=\"instagram_post_charge\"\n                                        id='instagram_post_charge'\n                                        value={adCost?.instagram_post_charge}\n                                        onChange={adCostONchange}\n                                        required\n                                        placeholder=\"1\"\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col sm='12' className='text-center' style={{ paddingTop: '23px' }}>\n                                {\n                                    adCostLoading ? <Button.Ripple color='primary' className='mr-1' disabled>\n                                        <Spinner color='white' size='sm' />\n                                        <span className='ml-50'>Loading...</span>\n                                    </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\">\n                                        <span >Submit</span>\n                                    </Button.Ripple>\n                                }\n                            </Col>\n                        </Row>\n                    </Form>\n                </CardBody>\n            </Card>\n            <Card>\n                <CardHeader className='border-bottom'>\n                    <CardTitle>\n                        SMS Configuration\n                    </CardTitle>\n                </CardHeader>\n                <CardBody>\n                    <Form style={{ width: '100%' }} onSubmit={onCostConfSubmit} autoComplete=\"off\">\n                        <Row>\n                            <Col>\n                                <FormGroup>\n                                    <Label>Per SMS Cost</Label>\n                                    <Input\n                                        type=\"number\"\n                                        min={0}\n                                        step='0.01'\n                                        name=\"per_sms_cost\"\n                                        id='per_sms_cost'\n                                        value={per_sms_cost}\n                                        onChange={e => {\n                                            setper_sms_cost(e.target.value)\n                                        }}\n                                        required\n                                        placeholder=\"1\"\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col className='text-center' style={{ paddingTop: '23px' }}>\n                                {\n                                    CostManageLoading ? <Button.Ripple color='primary' className='mr-1' disabled>\n                                        <Spinner color='white' size='sm' />\n                                        <span className='ml-50'>Loading...</span>\n                                    </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\">\n                                        <span >Submit</span>\n                                    </Button.Ripple>\n                                }\n                            </Col>\n                        </Row>\n                    </Form>\n                </CardBody>\n            </Card>\n            {/* <Card>\n                <CardHeader className='border-bottom'>\n                    <CardTitle>\n                        Commission Configuration\n                    </CardTitle>\n                </CardHeader>\n                <CardBody>\n                    <Card className='border-bottom'>\n                        <CardHeader>\n                            <CardTitle>\n                                Global  Commission\n                            </CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                            <Form style={{ width: '100%' }} onSubmit={onGCSubmit} autoComplete=\"off\">\n                                <Row>\n                                    <Col>\n                                        <FormGroup>\n                                            <Label>Commission(%)</Label>\n                                            <Input\n                                                type=\"number\"\n                                                min={0}\n                                                max={100}\n                                                step='0.01'\n                                                name=\"commission_percentage\"\n                                                id='commission_percentage'\n                                                value={commission_percentage}\n                                                onChange={e => {\n                                                    setcommission_percentage(e.target.value)\n                                                }}\n                                                required\n                                                placeholder=\"1\"\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    <Col className='text-center' style={{ paddingTop: '23px' }}>\n                                        {\n                                            commission_percentageLoading ? <Button.Ripple color='primary' className='mr-1' disabled>\n                                                <Spinner color='white' size='sm' />\n                                                <span className='ml-50'>Loading...</span>\n                                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\">\n                                                <span >Submit</span>\n                                            </Button.Ripple>\n                                        }\n                                    </Col>\n                                </Row>\n                            </Form>\n                        </CardBody>\n                    </Card>\n                    <Card className='border-bottom'>\n                        <CardHeader>\n                            <CardTitle>\n                                Merchant Based  Commission\n                            </CardTitle>\n                        </CardHeader>\n                        <CardBody>\n                            <Form style={{ width: '100%' }} onSubmit={onSelectedMerchantSubmit} autoComplete=\"off\">\n                                <Row>\n                                    <Col md='6'>\n                                        <FormGroup>\n                                            <Label>Select Merchants</Label>\n                                            <Select\n                                                theme={selectThemeColors}\n                                                className='react-select'\n                                                classNamePrefix='select'\n                                                name=\"\"\n                                                maxMenuHeight={100}\n                                                onChange={(selected) => {\n                                                    setSelectedMerchantList(selected)\n                                                }}\n                                                options={MerchantList}\n                                                isClearable\n                                                isMulti\n                                                isLoading={false}\n                                            />\n                                        </FormGroup>\n                                    </Col>\n                                    {\n                                        !!SelectedMerchantList.length && <Col md='3'>\n                                            <FormGroup>\n                                                <Label>Commission (%) </Label>\n                                                <Input\n                                                    type=\"number\"\n                                                    min={0}\n                                                    max={100}\n                                                    step='0.01'\n                                                    name={merchant_commission_percentage}\n                                                    id={merchant_commission_percentage}\n                                                    value={merchant_commission_percentage}\n                                                    onChange={e => {\n                                                        setmerchant_commission_percentage(e.target.value)\n                                                    }}\n                                                    required\n                                                    placeholder=\"1\"\n                                                />\n                                            </FormGroup>\n                                        </Col>\n                                    }\n                                    {!!SelectedMerchantList.length && <Col md='3' className='text-center' style={{ paddingTop: '23px' }}>\n                                        {\n                                            SelectedMerchantLoading ? <Button.Ripple color='primary' className='mr-1' disabled>\n                                                <Spinner color='white' size='sm' />\n                                                <span className='ml-50'>Loading...</span>\n                                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\">\n                                                <span >Submit</span>\n                                            </Button.Ripple>\n                                        }\n                                    </Col>}\n                                </Row>\n                            </Form>\n                        </CardBody>\n                    </Card>\n                    <MrchntCmsnTable\n                        TableDataLoading={TableDataLoading}\n                        MerchantCmsnList={MerchantCmsnList}\n                        setTableDataRefresh={setTableDataRefresh}\n                        setMerchantCmsnList={setMerchantCmsnList} />\n                </CardBody>\n            </Card> */}\n        </Fragment>\n    )\n}\n\nexport default CostSettings","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n","\n//Ex-> '1234567891' to '1234 567 891'\nexport const FormatePhoneNo = (phone) => {\n    const phonenoinstring = String(phone)\n    return phonenoinstring.replace(/^(.{4})(.*)(.{3})$/, '$1 $2 $3')\n}\n\nconst options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' }\n\nexport const formatReadableDate = (date) => { return (new Date(date)).toLocaleDateString(undefined, options) }\n\nexport const validateEmail = (email) => {\n    return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\n}\n\nexport const thousandSeparator = (x) => { return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") }\n\nexport const handle401 = async (status) => {\n    if (status === 401) {\n        window.location.href = '/Adminlogin'\n        await localStorage.clear()\n    }\n}\n\nexport const ExportCSV = (array, keys, CSVname) => {\n    // ** Downloads CSV\n    // const keys = ['name', 'email', 'mobile']\n    // ** Converts table to CSV\n    function convertArrayOfObjectsToCSV(array) {\n        let result\n        const columnDelimiter = ','\n        const lineDelimiter = '\\n'\n        result = ''\n        result += keys.join(columnDelimiter)\n        result += lineDelimiter\n\n        array.forEach(item => {\n            let ctr = 0\n            keys.forEach(key => {\n                if (ctr > 0) result += columnDelimiter\n                result += item[key]\n                ctr++\n            })\n            result += lineDelimiter\n        })\n        return result\n    }\n    const link = document.createElement('a')\n    let csv = convertArrayOfObjectsToCSV(array)\n    if (csv === null) return\n    const userData = JSON.parse(localStorage.getItem('userData'))\n    const filename = `${CSVname}_${new Date().toISOString()}_${userData['fullname'].replaceAll(/\\s/g, '')}.csv`\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n        csv = `data:text/csv;charset=utf-8,${csv}`\n    }\n\n    link.setAttribute('href', encodeURI(csv))\n    link.setAttribute('download', filename)\n    link.click()\n}","import React, { Fragment, useState, useEffect } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\n} from 'reactstrap'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\n\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\n    const [currentPage, setCurrentPage] = useState(0)\n\n    // ** Function to handle Pagination\n    const handlePagination = page => {\n        setCurrentPage(page.selected)\n    }\n    // ** Custom Pagination\n    const CustomPagination = () => (\n        <ReactPaginate\n            previousLabel=''\n            nextLabel=''\n            forcePage={currentPage}\n            onPageChange={page => handlePagination(page)}\n            pageCount={TableData.length ? TableData.length / 10 : 1}\n            breakLabel='...'\n            pageRangeDisplayed={2}\n            marginPagesDisplayed={2}\n            activeClassName='active'\n            pageClassName='page-item'\n            breakClassName='page-item'\n            breakLinkClassName='page-link'\n            nextLinkClassName='page-link'\n            nextClassName='page-item next'\n            previousClassName='page-item prev'\n            previousLinkClassName='page-link'\n            pageLinkClassName='page-link'\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\n        />\n    )\n    return (\n        <Fragment>\n\n            <DataTable\n                noHeader\n                pagination\n                columns={column}\n                paginationPerPage={10}\n                className='react-dataTable'\n                sortIcon={<ChevronDown size={10} />}\n                paginationDefaultPage={currentPage + 1}\n                paginationComponent={CustomPagination}\n                data={TableData}\n                progressPending={TableDataLoading}\n                progressComponent={<Spinner color='primary' />}\n                responsive={true}\n                pointerOnHover\n                highlightOnHover\n                striped\n            />\n             \n        </Fragment>\n    )\n}\n\nexport default CommonDataTable"],"sourceRoot":""}