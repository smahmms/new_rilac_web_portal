{"version":3,"sources":["views/VendorComponents/OverallPointRuleManagement/EditModal.js","views/VendorComponents/OverallPointRuleManagement/OverallPointRuleList.js","views/viewhelper.js","views/helper.js","views/VendorComponents/ClientSideDataTable.js"],"names":["EditModal","_ref","modal","toggleModal","overallPointRuleInfo","setoverallPointRuleInfo","_useState","setReset","resetData","JSON","parse","localStorage","getItem","useState","_useState2","_slicedToArray","editPointRuleloading","handleChange","e","_objectSpread","_defineProperty","target","name","value","_jsxs","Modal","isOpen","toggle","className","children","_jsx","ModalHeader","ModalBody","Form","style","width","onSubmit","preventDefault","autoComplete","Col","sm","FormGroup","Label","for","Input","type","id","PointRateSetupName","onChange","placeholder","PurchaseAmount","Points","Date","ExpiryDate","toLocaleDateString","check","checked","OfferRate","OfferStartDate","OfferEndDate","Button","Ripple","color","disabled","marginTop","Spinner","size","MySwal","withReactContent","Swal","OverallPointRuleList","TableDataLoading","_useState3","_useState4","_useState5","_useState6","overallPointRuleList","_useState7","_useState8","_useState9","_useState10","setModal","useEffect","column","minWidth","sortable","cell","row","index","selector","item","formatReadableDate","CreatedAt","_Fragment","title","Edit","cursor","onClick","Trash","Id","message","fire","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","buttonsStyling","isLoading","then","result","isConfirmed","Card","CardHeader","CardTitle","tag","Link","to","Plus","marginRight","CardBody","Row","md","CommonDataTable","TableData","Error","err","response","status","toast","error","data","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","Success","success","options","year","month","day","hour","minute","date","thousandSeparator","x","toString","replace","handle401","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","window","location","href","clear","stop","_x","apply","arguments","ExportCSV","array","CSVname","link","document","createElement","csv","join","forEach","ctr","key","convertArrayOfObjectsToCSV","userData","filename","concat","toISOString","replaceAll","match","setAttribute","encodeURI","click","currentPage","setCurrentPage","Fragment","DataTable","noHeader","pagination","columns","paginationPerPage","sortIcon","ChevronDown","paginationDefaultPage","paginationComponent","_jsx2","ReactPaginate","previousLabel","nextLabel","forcePage","onPageChange","page","selected","handlePagination","pageCount","length","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","progressPending","progressComponent","responsive"],"mappings":"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","file":"static/js/355.702d4089.chunk.js","sourcesContent":["import { Fragment, useState, useEffect, useRef } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical,\n    Edit, Archive, Trash, Search, ChevronLeft, Eye, XCircle, Facebook, Globe, Instagram, Twitter\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, CardBody, CustomInput, Table, Spinner, InputGroup, InputGroupAddon, InputGroupText, FormFeedback, Progress, Modal, ModalHeader, ModalBody, ModalFooter\n} from 'reactstrap'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\nimport { useHistory } from 'react-router-dom'\nimport Select from 'react-select'\nimport { selectThemeColors, transformInToFormObject } from '@utils'\nimport { formatReadableDate } from '../../helper'\n\nconst EditModal = ({ modal, toggleModal, overallPointRuleInfo, setoverallPointRuleInfo, setReset, resetData }) => {\n    const BusinessList = JSON.parse(localStorage.getItem('customerBusinesses'))\n    const [editPointRuleloading, seteditPointRuleloading] = useState(false)\n\n    const handleChange = (e) => {\n        setoverallPointRuleInfo({ ...overallPointRuleInfo, [e.target.name]: e.target.value })\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        // const { Id, PointRateSetupName, PurchaseAmount, Points, ExpiryDate, OfferRate } = overallPointRuleInfo\n        // let { OfferStartDate, OfferEndDate } = overallPointRuleInfo\n        // localStorage.setItem('usePMStoken', true)\n        // seteditPointRuleloading(true)\n        // const merchantId = BusinessList[0].pms_merchantid\n        // if (!OfferRate) { \n        //     OfferStartDate = null \n        //     OfferEndDate = null\n        //  }\n        // useJwt.updateOverallRule(merchantId, { rule_id:Id,  PointRateSetupName, PurchaseAmount, Points, ExpiryDate, OfferRate, OfferStartDate, OfferEndDate }).then(res => {\n        //     setReset(!resetData)\n        //     seteditPointRuleloading(false)\n        //     console.log(res)\n        //     toggleModal()\n        //     Success(res)\n        // }).catch(err => {\n        //     seteditPointRuleloading(false)\n        //     localStorage.setItem('usePMStoken', false)\n        //     Error(err)\n        //     console.log(err)\n        // })\n    }\n    return (\n        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\n            <ModalHeader toggle={toggleModal}>Edit Point Rule</ModalHeader>\n            <ModalBody>\n                <Form className=\"row\" style={{ width: '100%' }} onSubmit={onSubmit} autoComplete=\"off\">\n                <Col sm=\"6\" >\n                            <FormGroup>\n                                <Label for=\"PointRateSetupName\">Point Rate Setup Name</Label>\n                                <Input type=\"text\"\n                                    name=\"PointRateSetupName\"\n                                    id='PointRateSetupName'\n                                    value={overallPointRuleInfo.PointRateSetupName}\n                                    onChange={handleChange}\n                                    placeholder=\"write a name\"\n                                />\n                            </FormGroup>\n                        </Col>\n                        <Col sm=\"6\" >\n                             <FormGroup>\n                                 <Label for=\"PurchaseAmount\">Purchase Amount</Label>\n                                 <Input type=\"number\"\n                                    name=\"PurchaseAmount\"\n                                    id='PurchaseAmount'\n                                    value={overallPointRuleInfo.PurchaseAmount}\n                                    onChange={handleChange}\n                                    \n                                    placeholder=\"0\"\n                                  />\n                            </FormGroup>\n                        </Col>\n                        <Col sm=\"6\" >\n                             <FormGroup>\n                                 <Label for=\"Points\">Points</Label>\n                                 <Input type=\"number\"\n                                    name=\"Points\"\n                                    id='Points'\n                                    value={overallPointRuleInfo.Points}\n                                    onChange={handleChange}\n                                    \n                                    placeholder=\"0\"\n                                  />\n                            </FormGroup>\n                        </Col>\n                        <Col sm=\"6\" >\n                             <FormGroup>\n                                 <Label for=\"ExpiryDate\">Expiry Date</Label>\n                                 <Input type=\"date\"\n                                    name=\"ExpiryDate\"\n                                    id='ExpiryDate'\n                                    value={new Date(overallPointRuleInfo.ExpiryDate).toLocaleDateString('fr-CA')}\n                                    onChange={handleChange}\n                                    \n                                    placeholder=\"0\"\n                                  />\n                            </FormGroup>\n                        </Col>\n                        <Col sm=\"12\" className='mb-1' >\n                            <FormGroup check>\n                                <Input onChange={(e) => {\n                                        if (e.target.checked) { \n                                            setoverallPointRuleInfo({ ...overallPointRuleInfo, OfferRate: true })\n                                        } else {\n                                            setoverallPointRuleInfo({ ...overallPointRuleInfo, OfferRate: false })\n                                        }\n                                    }\n                                } type='checkbox' id='viaEmail' checked={overallPointRuleInfo.OfferRate}/>\n                                <Label for='viaEmail' check>\n                                    Offer Rate\n                                </Label>\n                            </FormGroup>\n                        </Col>\n                        { overallPointRuleInfo.OfferRate ? <Col sm=\"6\" >\n                             <FormGroup>\n                                 <Label for=\"OfferStartDate\">Offer Start Date</Label>\n                                 <Input type=\"date\"\n                                    name=\"OfferStartDate\"\n                                    id='OfferStartDate'\n                                    value={new Date(overallPointRuleInfo.OfferStartDate).toLocaleDateString('fr-CA')}\n                                    onChange={handleChange}\n                                    \n                                    placeholder=\"0\"\n                                  />\n                            </FormGroup>\n                        </Col> : null }\n                        { overallPointRuleInfo.OfferRate ? <Col sm=\"6\" >\n                             <FormGroup>\n                                 <Label for=\"OfferEndDate\">Offer End Date</Label>\n                                 <Input type=\"date\"\n                                    name=\"OfferEndDate\"\n                                    id='OfferEndDate'\n                                    value={new Date(overallPointRuleInfo.OfferEndDate).toLocaleDateString('fr-CA')}\n                                    onChange={handleChange}\n                                    \n                                    placeholder=\"0\"\n                                  />\n                            </FormGroup>\n                        </Col> : null }\n\n                    <Col sm=\"12\" className='text-center'>\n                        {\n                            editPointRuleloading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\n                                <Spinner color='white' size='sm' />\n                                <span className='ml-50'>Loading...</span>\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\" style={{ marginTop: '25px' }}>\n                                <span >Submit</span>\n                            </Button.Ripple>\n                        }\n                    </Col>\n                </Form>\n            </ModalBody>\n        </Modal>\n    )\n}\nexport default EditModal","import React, { Fragment, useEffect, useState, useRef } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\n} from 'reactstrap'\nimport { Link, useHistory } from 'react-router-dom'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst MySwal = withReactContent(Swal)\nimport CommonDataTable from '../ClientSideDataTable'\nimport EditModal from './EditModal'\nimport {formatReadableDate} from '../../helper'\n\nconst OverallPointRuleList = () => {\n    const [TableDataLoading, setTableDataLoading] = useState(true)\n    const [resetData, setReset] = useState(true)\n    const [overallPointRuleList, setoverallPointRuleList] = useState([])\n    const [overallPointRuleInfo, setoverallPointRuleInfo] = useState({})\n\n    const [modal, setModal] = useState(false)\n    const toggleModal = () => setModal(!modal)\n    const BusinessList = JSON.parse(localStorage.getItem('customerBusinesses'))\n\n    useEffect(() => {\n        // localStorage.setItem('usePMStoken', true)\n        // const merchantId = BusinessList[0].pms_merchantid\n        // useJwt.getOverallRules(merchantId).then(res => {\n        //     console.log(res)\n        //     setoverallPointRuleList(res.data.data)\n        //     localStorage.setItem('usePMStoken', false)\n        //     setTableDataLoading(false)\n        // }).catch(err => {\n        //     Error(err)\n        //     console.log(err)\n        //     setTableDataLoading(false)\n        //     localStorage.setItem('usePMStoken', false)\n        // })\n    }, [resetData])\n    const handlePoPupActions = (Id, message) => {\n       // localStorage.setItem('usePMStoken', true)\n        return MySwal.fire({\n            title: message,\n            text: `You won't be able to revert this`,\n            icon: 'warning',\n            allowOutsideClick: false,\n            allowEscapeKey: false,\n            showCancelButton: true,\n            confirmButtonText: 'Yes',\n            customClass: {\n                confirmButton: 'btn btn-primary',\n                cancelButton: 'btn btn-danger ml-1'\n            },\n            showLoaderOnConfirm: true,\n            preConfirm: () => {\n                // return true\n                // const merchantId = BusinessList[0].pms_merchantid\n                // const ruleId = parseInt(Id)\n                // return useJwt.deleteOverallRule(merchantId, {rule_id: ruleId}).then(res => {\n                //     Success(res)\n                //     console.log(res)\n                //     setoverallPointRuleList(overallPointRuleList.filter(x => x.Id !== Id))\n                //     localStorage.setItem('usePMStoken', false)\n                // }).catch(err => {\n                //     localStorage.setItem('usePMStoken', false)\n                //     console.log(err.response)\n                //     Error(err)\n                // })\n            },\n            buttonsStyling: false,\n            allowOutsideClick: () => !Swal.isLoading()\n        }).then(function (result) {\n            if (result.isConfirmed) {\n\n            }\n        })\n\n    }\n    const column = [\n        {\n            name: 'SL.',\n            minWidth: '100px',\n            sortable: true,\n            cell: (row, index) => index + 1  //RDT provides index by default\n        },\n        {\n            name: 'Point Rate Setup Name',\n            minWidth: '150px',\n            sortable: true,\n            selector: 'PointRateSetupName'\n        },\n        {\n            name: 'Purchase Amount',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'PurchaseAmount'\n        },\n        {\n            name: 'Points',\n            minWidth: '100px',\n            sortable: true,\n            selector: 'Points'\n        },\n        {\n            name: 'Expiry Date',\n            minWidth: '250px',\n            sortable: true,\n            selector: (item) => {\n                return item.ExpiryDate ? formatReadableDate(item.ExpiryDate) : null\n               }\n        },\n        {\n            name: 'Offer Rate',\n            minWidth: '100px',\n            sortable: true,\n            selector: (item) => {\n                return item.OfferRate ? 'True' : 'False'\n              } \n        },\n        {\n            name: 'Offer Start Date',\n            minWidth: '250px',\n            sortable: true,\n            selector: (item) => {\n                return item.OfferStartDate ? formatReadableDate(item.OfferStartDate) : null\n               }\n        },\n        {\n            name: 'Offer End Date',\n            minWidth: '250px',\n            sortable: true,\n            selector: (item) => {\n                return item.OfferEndDate ? formatReadableDate(item.OfferEndDate) : null\n               }\n        },\n        {\n            name: 'Created At',\n            minWidth: '250px',\n            sortable: true,\n            selector: (item) => {\n                return item.CreatedAt ? formatReadableDate(item.CreatedAt) : null\n               }\n        },\n        {\n            name: 'Action',\n            minWidth: '150px',\n            // sortable: true,\n            selector: row => {\n                return <>\n                    <span title=\"Edit\">\n                        <Edit size={15}\n                            color='teal'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => {\n                                setoverallPointRuleInfo(row)\n                                setModal(true)\n                            }}\n                        />\n                    </span>&nbsp;&nbsp;\n                    <span title=\"Delete\">\n                        <Trash size={15}\n                            color='red'\n                            style={{ cursor: 'pointer' }}\n                            onClick={(e) => handlePoPupActions(row.Id, 'Do you want to delete?')}\n                        />\n                    </span>\n                </>\n            }\n        }\n    ]\n    return (\n        <Card>\n            <CardHeader className='border-bottom'>\n                <CardTitle tag='h4'>Global Rules</CardTitle>\n                <Button.Ripple className='ml-2' color='primary' tag={Link} to='/createOverallPointRule' >\n                   <div className='d-flex align-items-center'>\n                        <Plus size={17} style={{marginRight:'5px'}}/>\n                        <span >Create Global Rule</span>\n                   </div>\n                 </Button.Ripple>\n            </CardHeader>\n            <CardBody>\n                <Row>\n                    <Col md='12'>\n                        <CommonDataTable column={column} TableData={overallPointRuleList} TableDataLoading={TableDataLoading} />\n                    </Col>\n                </Row>\n                <EditModal\n                    toggleModal={toggleModal}\n                    modal={modal}\n                    resetData={resetData}\n                    setReset={setReset}\n                    overallPointRuleInfo={overallPointRuleInfo}\n                    setoverallPointRuleInfo={setoverallPointRuleInfo}\n                />\n            </CardBody>\n        </Card>\n    )\n}\n\nexport default OverallPointRuleList","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n","\n//Ex-> '1234567891' to '1234 567 891'\nexport const FormatePhoneNo = (phone) => {\n    const phonenoinstring = String(phone)\n    return phonenoinstring.replace(/^(.{4})(.*)(.{3})$/, '$1 $2 $3')\n}\n\nconst options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' }\n\nexport const formatReadableDate = (date) => { return (new Date(date)).toLocaleDateString(undefined, options) }\n\nexport const validateEmail = (email) => {\n    return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)\n}\n\nexport const thousandSeparator = (x) => { return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") }\n\nexport const handle401 = async (status) => {\n    if (status === 401) {\n        window.location.href = '/Adminlogin'\n        await localStorage.clear()\n    }\n}\n\nexport const ExportCSV = (array, keys, CSVname) => {\n    // ** Downloads CSV\n    // const keys = ['name', 'email', 'mobile']\n    // ** Converts table to CSV\n    function convertArrayOfObjectsToCSV(array) {\n        let result\n        const columnDelimiter = ','\n        const lineDelimiter = '\\n'\n        result = ''\n        result += keys.join(columnDelimiter)\n        result += lineDelimiter\n\n        array.forEach(item => {\n            let ctr = 0\n            keys.forEach(key => {\n                if (ctr > 0) result += columnDelimiter\n                result += item[key]\n                ctr++\n            })\n            result += lineDelimiter\n        })\n        return result\n    }\n    const link = document.createElement('a')\n    let csv = convertArrayOfObjectsToCSV(array)\n    if (csv === null) return\n    const userData = JSON.parse(localStorage.getItem('userData'))\n    const filename = `${CSVname}_${new Date().toISOString()}_${userData['fullname'].replaceAll(/\\s/g, '')}.csv`\n\n    if (!csv.match(/^data:text\\/csv/i)) {\n        csv = `data:text/csv;charset=utf-8,${csv}`\n    }\n\n    link.setAttribute('href', encodeURI(csv))\n    link.setAttribute('download', filename)\n    link.click()\n}","import React, { Fragment, useState, useEffect } from 'react'\nimport {\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\n} from 'react-feather'\nimport {\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\n} from 'reactstrap'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport DataTable from 'react-data-table-component'\n\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\n    const [currentPage, setCurrentPage] = useState(0)\n\n    // ** Function to handle Pagination\n    const handlePagination = page => {\n        setCurrentPage(page.selected)\n    }\n    // ** Custom Pagination\n    const CustomPagination = () => (\n        <ReactPaginate\n            previousLabel=''\n            nextLabel=''\n            forcePage={currentPage}\n            onPageChange={page => handlePagination(page)}\n            pageCount={TableData.length ? TableData.length / 10 : 1}\n            breakLabel='...'\n            pageRangeDisplayed={2}\n            marginPagesDisplayed={2}\n            activeClassName='active'\n            pageClassName='page-item'\n            breakClassName='page-item'\n            breakLinkClassName='page-link'\n            nextLinkClassName='page-link'\n            nextClassName='page-item next'\n            previousClassName='page-item prev'\n            previousLinkClassName='page-link'\n            pageLinkClassName='page-link'\n            breakClassName='page-item'\n            breakLinkClassName='page-link'\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\n        />\n    )\n    return (\n        <Fragment>\n            <DataTable\n                noHeader\n                pagination\n                /*selectableRows*/\n                columns={column}\n                paginationPerPage={10}\n                className='react-dataTable'\n                sortIcon={<ChevronDown size={10} />}\n                paginationDefaultPage={currentPage + 1}\n                paginationComponent={CustomPagination}\n                data={TableData}\n                progressPending={TableDataLoading}\n                progressComponent={<Spinner color='primary' />}\n                responsive={true}\n            /*selectableRowsComponent={BootstrapCheckbox}*/\n            />\n        </Fragment>\n    )\n}\n\nexport default CommonDataTable"],"sourceRoot":""}