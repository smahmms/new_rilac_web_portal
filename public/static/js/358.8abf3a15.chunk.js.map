{"version":3,"sources":["views/pages/authentication/GoCardless.js","views/pages/authentication/PaypalCardForm.js","views/pages/authentication/AddCreditCard.js","views/pages/authentication/CardDetails.js","views/viewhelper.js"],"names":["withReactContent","Swal","GoCardless","props","setConditionalRendering","showCompanyName","_useState","setshowCompanyName","continueBtn","setcontinueBtn","useState","_objectSpread","JSON","parse","localStorage","getItem","isnewaccount","isibn","accountnumber","sortcode","accountholdername","isneedmorethenonepersontoauth","addpaymentid","payment_method_id","sub_type","_useState2","_slicedToArray","userinput","setuserinput","_useState3","email","address","accountNumber","_useState4","errors","setErrors","_useState5","_useState6","_useState7","_useState8","showCustomPostCode","setshowCustomPostCode","_useState9","_useState10","CustomPostCode","setCustomPostCode","_useState11","_useState12","PostCodeError","_useState13","_useState14","postcodefetching","setpostcodefetching","_useState15","_useState16","businessaddress","setbusinessaddress","_useState17","_useState18","tempaddress","settempaddress","_useState19","_useState20","loader","setLoader","_useState21","_useState22","ErrorTexts","onChange","e","target","name","chkEmail","test","value","err","length","_defineProperty","_jsx","className","children","Card","Form","style","width","onSubmit","preventDefault","city","firstname","lastname","postcode","console","log","useJwt","customerBusinessRegistration","then","res","window","location","href","data","payload","payment_url","catch","error","Error","response","autoComplete","_jsxs","Row","Col","md","Alert","color","map","i","concat","message","Label","Input","required","placeholder","type","companyname","disabled","FormGroup","for","InputGroup","InputGroupAddon","addonType","InputGroupText","Search","size","id","Button","paddingBottom","outline","Spinner","onClick","country","ukAddressEndpoint","postCode","addresses","item","index","label","formatted_address","filter","splice","toString","CustomInput","checked","inline","sm","Select","styles","control","base","state","borderColor","maxMenuHeight","theme","selectThemeColors","classNamePrefix","index1","town_or_city","options","isClearable","Ripple","marginTop","Send","ToastContent","_ref","role","Fragment","Avatar","icon","Coffee","PaypalCardForm","ability","useContext","AbilityContext","_useSkin","useSkin","_useSkin2","skin","history","useHistory","dispatch","useDispatch","_useForm","useForm","register","handleSubmit","trigger","isLoad","setIsLoad","stripe","useStripe","elements","useElements","CARD_ELEMENT_OPTIONS","useRef","lineHeight","fontSize","invalid","iconColor","card_name","card_number","card_address","card_expiry","card_cvc","paymentMethodId","userInput","illustration","require","default","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee5","paymentMethodObj","wrap","_context5","prev","next","abrupt","card","getElement","CardNumberElement","createPaymentMethod","_ref3","_callee4","handleServerResponse","_context4","paymentMethod","_ref4","_callee2","_yield$stripe$handleC","errorAction","paymentIntent","_data","_context2","alert","requiresAction","handleCardAction","clientSecret","sent","payByStripe","paymentIntentId","_ref5","_callee","payload1","_context","stop","_x4","apply","arguments","user_info","accessToken","token","refreshToken","extras","eCommerceCartItemsCount","action","subject","handleLogin","update","toast","success","username","transition","Slide","hideProgressBar","autoClose","setItem","getBMStoken","BMS_USER","password","BMS_PASS","jwtToken","customerbusinesslistbymobileno","mobile","Number","mobileno","stringify","push","getHomeRouteForLoggedInUser","_x3","_ref6","_callee3","_context3","_x5","_x2","_x","onBlur","event","CardExpiryElement","CardCvcElement","CreditCardDetails","stripePromise","setStripePromise","amount","setAmount","childFunc","useEffect","stripeData","loadStripe","publishableKey","parseFloat","Elements","Link","to","CardDetails","activeTab","setActiveTab","toggle","tab","userData","maxWidth","CardBody","Nav","pills","NavItem","NavLink","active","TabContent","TabPane","tabId","status","position","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","Object","keys","Success"],"mappings":"0XAQeA,IAAiBC,KA6XjBC,IAxXI,SAACC,GACsFA,EAA9FC,wBAAR,IAAiCC,EAAqEF,EAArEE,gBACjCC,GADsGH,EAApDI,mBAAoDJ,EAAhCK,YAAgCL,EAAnBM,eACjDC,mBAAQC,wBAAC,CAAC,EACrCC,KAAKC,MAAMC,aAAaC,QAAQ,uBAAqB,IACxDC,cAAc,EACdC,OAAO,EACPC,cAAe,GASfC,SAAU,GACVC,kBAAmB,GAEnBC,+BAA+B,EAC/BC,aAAc,EACdC,kBAAmB,EACnBC,SAAU,cACZC,EAAAC,YAAApB,EAAA,GApBKqB,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAqB9BI,EAA4BnB,mBAAS,CACjCoB,OAAO,EACPC,SAAS,EACTC,eAAe,EACfb,UAAU,IACZc,EAAAP,YAAAG,EAAA,GALKK,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAMxBG,EAAkC1B,oBAAS,GAAM2B,EAAAX,YAAAU,EAAA,GACjDE,GADgBD,EAAA,GAAcA,EAAA,GACsB3B,oBAAS,IAAM6B,EAAAb,YAAAY,EAAA,GAA5DE,EAAkBD,EAAA,GAAEE,EAAqBF,EAAA,GAChDG,EAA4ChC,oBAAS,GAAKiC,EAAAjB,YAAAgB,EAAA,GAAnDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,EAA0CpC,oBAAS,GAAMqC,EAAArB,YAAAoB,EAAA,GAAlDE,EAAaD,EAAA,GACpBE,GADsCF,EAAA,GACUrC,oBAAS,IAAMwC,EAAAxB,YAAAuB,EAAA,GAAxDE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAC5CG,EAA8C3C,mBAAS,IAAG4C,EAAA5B,YAAA2B,EAAA,GAAnDE,GAAeD,EAAA,GAAEE,GAAkBF,EAAA,GAC1CG,GAAsC/C,mBAAS,IAAGgD,GAAAhC,YAAA+B,GAAA,GAA3CE,GAAWD,GAAA,GAAEE,GAAcF,GAAA,GAClCG,GAA4BnD,oBAAS,GAAMoD,GAAApC,YAAAmC,GAAA,GAApCE,GAAMD,GAAA,GAAEE,GAASF,GAAA,GACxBG,GAAoCvD,mBAAS,IAAGwD,GAAAxC,YAAAuC,GAAA,GAAzCE,GAAUD,GAAA,GAEXE,IAF0BF,GAAA,GAEf,SAACG,GAQd,GAAsB,UAAlBA,EAAEC,OAAOC,KAAkB,CAC3B,IAAMC,EAAW,eAAeC,KAAKJ,EAAEC,OAAOI,OACxCC,EAAGhE,YAAA,GAAQuB,GACcyC,EAAI7C,OAAlC0C,EACDrC,EAASxB,YAAC,CAAC,EAAIgE,GACnB,CACA,GAAsB,aAAlBN,EAAEC,OAAOC,KAAqB,CAC9B,IAAMI,EAAGhE,YAAA,GAAQuB,GACS,IAA1BmC,EAAEC,OAAOI,MAAME,OAAeD,EAAIxD,UAAW,EAAOwD,EAAIxD,UAAW,EACnEgB,EAASxB,YAAC,CAAC,EAAIgE,GACnB,CACA,GAAsB,kBAAlBN,EAAEC,OAAOC,KAA0B,CACnC,IAAMI,EAAGhE,YAAA,GAAQuB,GACS,IAA1BmC,EAAEC,OAAOI,MAAME,OAAeD,EAAI3C,eAAgB,EAAO2C,EAAI3C,eAAgB,EAC7EG,EAASxB,YAAC,CAAC,EAAIgE,GACnB,CACA/C,EAAYjB,wBAAC,CAAC,EAAIgB,GAAS,GAAAkD,YAAA,GAAGR,EAAEC,OAAOC,KAAOF,EAAEC,OAAOI,QAC3D,GAmGA,OACII,cAAA,OAAKC,UAAU,MAAKC,SAChBF,cAACG,IAAI,CAAAD,SAMDF,cAACI,IAAI,CAACH,UAAU,MAAMI,MAAO,CAAEC,MAAO,QAAUC,SA9C3C,SAAChB,GACdA,EAAEiB,iBAMF,IAAQpE,EAAoGS,EAApGT,cAAea,EAAqFJ,EAArFI,QAASwD,EAA4E5D,EAA5E4D,KAAMzD,EAAsEH,EAAtEG,MAAO0D,EAA+D7D,EAA/D6D,UAAWC,EAAoD9D,EAApD8D,SAAUC,EAA0C/D,EAA1C+D,SAAUvE,EAAgCQ,EAAhCR,SAAUC,EAAsBO,EAAtBP,kBAEhFuD,EAAGhE,YAAA,GAAQuB,GACeyC,EAAI5C,SAAnCA,EACDI,EAASxB,YAAC,CAAC,EAAIgE,KAEV5C,GAAWG,EAAOJ,OAASI,EAAOf,UAAYe,EAAOF,gBAI1DgC,IAAU,GACV2B,QAAQC,IAAI,CACR1E,gBAAea,UAASwD,OAAMzD,QAAO0D,YAAWC,WAAUC,WAAUvE,WAAUC,sBAKlFuE,QAAQC,IAAIjE,GACZkE,IAAOC,6BAA4BnF,YAAC,CAAC,EAAGgB,IAAYoE,MAAK,SAAAC,GACrDL,QAAQC,IAAII,GACZC,OAAOC,SAASC,KAAOH,EAAII,KAAKC,QAAQC,WAG5C,IAAGC,OAAM,SAAAC,GACLxC,IAAU,GACVyC,YAAMD,EAAME,UAERf,QAAQC,IAAIY,EAAME,SAE1B,IACJ,EASgFC,aAAa,MAAK3B,SAClF4B,eAACC,IAAG,CAAA7B,SAAA,GACGb,GAAWS,QAAUE,cAACgC,IAAG,CAACC,GAAG,KAAI/B,SAChCF,cAACkC,IAAK,CAACC,MAAM,SAASlC,UAAU,MAAKC,SACjCF,cAAA,MAAAE,SAEQb,GAAW+C,KAAI,SAACvC,EAAKwC,GAAC,OAAKrC,cAAA,MAAAE,SAAA,GAAAoC,OAAgBzC,EAAI0C,UAAXF,EAA0B,UAK9EP,eAACE,IAAG,CAACC,GAAG,IAAIhC,UAAU,OAAMC,SAAA,CACxBF,cAACwC,IAAK,CAAAtC,SAAG3E,EAAkB,eAAiB,eAC1CA,EAOGyE,cAACyC,IAAK,CACPC,UAAQ,EACRC,YAAY,oBACZC,KAAK,OACLnD,KAAK,cACLG,MAAO/C,EAAUgG,YACjBvD,SAAUA,KAbMU,cAACyC,IAAK,CACtBC,UAAQ,EACRC,YAAY,YACZC,KAAK,OACLnD,KAAK,YACLG,MAAO/C,EAAU6D,UACjBpB,SAAUA,SAWhB/D,GAAmBuG,eAACE,IAAG,CAACC,GAAG,IAAIhC,UAAU,OAAMC,SAAA,CAC7CF,cAACwC,IAAK,CAAAtC,SAAE,cACRF,cAACyC,IAAK,CACFC,UAAQ,EACRC,YAAY,WACZC,KAAK,OACLnD,KAAK,WACLG,MAAO/C,EAAU8D,SACjBrB,SAAUA,QAGlBwC,eAACE,IAAG,CAACC,GAAG,IAAIhC,UAAU,OAAMC,SAAA,CACxBF,cAACwC,IAAK,CAAAtC,SAAE,UACRF,cAACyC,IAAK,CACFC,UAAQ,EACRC,YAAY,aACZC,KAAK,QACLnD,KAAK,QACLG,MAAO/C,EAAUG,MACjBsC,SAAUA,KAEblC,EAAOJ,OAASgD,cAAA,SAAOK,MAAO,CAAE8B,MAAO,OAAQjC,SAAC,kCAGrD4B,eAACE,IAAG,CAACC,GAAG,IAAIhC,UAAU,OAAMC,SAAA,CACxBF,cAACwC,IAAK,CAAAtC,SAAE,wBACRF,cAACyC,IAAK,CACFC,UAAQ,EACRC,YAAY,sBACZC,KAAK,OACLnD,KAAK,oBACLG,MAAO/C,EAAUP,kBACjBgD,SAAUA,GACVwD,UAAWjG,EAAUX,kBAG7B4F,eAACE,IAAG,CAACC,GAAG,IAAIhC,UAAU,OAAMC,SAAA,CACxB4B,eAACU,IAAK,CAAAtC,SAAA,CAAGrD,EAAUV,OAAS,OAAO,gBACnC6D,cAACyC,IAAK,CACFC,UAAQ,EACRC,YAAY,YACZC,KAAK,SACLnD,KAAK,WACLG,MAAO/C,EAAUR,SACjBiD,SAAUA,GACVwD,UAAWjG,EAAUX,eAExBkB,EAAOf,UAAY2D,cAAA,SAAOK,MAAO,CAAE8B,MAAO,OAAQjC,SAAC,2BAGxD4B,eAACE,IAAG,CAACC,GAAG,IAAIhC,UAAU,OAAMC,SAAA,CACxB4B,eAACU,IAAK,CAAAtC,SAAA,CAAGrD,EAAUV,MAAQ,OAAS,iBAAiB,OACrD6D,cAACyC,IAAK,CACFC,UAAQ,EACRC,YAAY,iBACZC,KAAK,SACLnD,KAAK,gBACLG,MAAO/C,EAAUT,cACjBkD,SAAUA,GACVwD,UAAWjG,EAAUX,eAExBkB,EAAOF,eAAiB8C,cAAA,SAAOK,MAAO,CAAE8B,MAAO,OAAQjC,SAAC,2BAG7D4B,eAACE,IAAG,CAACC,GAAG,KAAI/B,SAAA,CACRF,cAAA,SACAA,cAACG,IAAI,CAAAD,SACD4B,eAACC,IAAG,CAAA7B,SAAA,CACAF,cAACgC,IAAG,CAACC,GAAG,IAAG/B,SACP4B,eAACiB,IAAS,CAAA7C,SAAA,CACN4B,eAACU,IAAK,CAACQ,IAAI,WAAU9C,SAAA,CAAC,YAASF,cAAA,QAAMK,MAAO,CAAE8B,MAAO,OAAQjC,SAAC,SAC9D4B,eAACmB,IAAU,CAAChD,UAAU,yBAAwBC,SAAA,CAC1CF,cAACkD,IAAe,CAACC,UAAU,UAASjD,SAChCF,cAACoD,IAAc,CAAAlD,SACXF,cAACqD,IAAM,CAACC,KAAM,SAGtBtD,cAACyC,IAAK,CAACG,KAAK,OACRnD,KAAK,WACL8D,GAAG,WACHZ,YAAY,YACZ/C,MAAO/C,EAAU+D,SACjBtB,SAAUA,GACVoD,UAAQ,IAEZ1C,cAACkD,IAAe,CAACC,UAAU,SAAQjD,SAC9B7B,EAAmB2B,cAACwD,IAAM,CAACnD,MAAO,CAAEoD,cAAe,OAAStB,MAAM,UAAUuB,SAAO,EAACZ,UAAQ,EAAA5C,SACzFF,cAAC2D,IAAO,CAACxB,MAAM,UAAUmB,KAAK,SACtBtD,cAACwD,IAAM,CAACrB,MAAM,UAAUuB,SAAO,EAACE,QAxMrE,WACf/G,EAAU+D,WACVtC,GAAoB,GACpBI,GAAmB,IACnB5B,EAAYjB,wBAAC,CAAC,EAAIgB,GAAS,IAAEI,QAAS,GAAI4G,QAAS,GAAIpD,KAAM,MAC7DM,IAAO+C,kBAAkB,CAAEC,SAAUlH,EAAU+D,WAAYK,MAAK,SAAAC,GAC5D,IAAQ8C,EAAc9C,EAAII,KAAKC,QAAvByC,UACRnD,QAAQC,IAAIkD,GACPA,EAAUlE,OAENnC,GAAsB,GAD3BA,GAAsB,GAE1BI,GAAkB,GAClB,IAAMuD,EAAO0C,EAAU5B,KAAI,SAAC6B,EAAMC,GAE9B,MAAO,CAAEtE,MAAOsE,EAAOC,MADRF,EAAKG,kBAAkBC,QAAO,SAAAJ,GAAI,OAAIA,CAAI,IAAEK,OAAO,EAAG,GAAGC,WAE5E,IACAjG,GAAoB,GACpBI,GAAmB4C,GACnBxC,GAAekF,EAEnB,IACKvC,OAAM,SAAA5B,GACHvB,GAAoB,GACpBqD,YAAM9B,GACNlC,GAAsB,EAC1B,IAEZ,EA6KoHuC,SAAC,aAKzEF,cAAA,OAAKC,UAAU,gBAAeC,SACzBxC,IAAuBQ,GAAiB8B,cAAA,SAAOK,MAAO,CAAE8B,MAAO,OAAQjC,SAAC,yBAE7EF,cAAA,OAAKC,UAAU,gBAAeC,SACzBhC,GAAiB8B,cAAA,SAAOK,MAAO,CAAE8B,MAAO,OAAQjC,SAAC,4CAIzDxC,GAAsBsC,cAACwE,IAAW,CAAC5B,KAAK,WAAWW,GAAI,YAAa3D,MAAO,MAAON,SAtO9F,SAACC,GAC1BzC,EAAYjB,wBAAC,CAAC,EAAIgB,GAAS,IAAEgH,QAAS,GAAI5G,QAAS,GAAIwD,KAAM,MACzDlB,EAAEC,OAAOiF,QACT1G,GAAkB,GAElBA,GAAkB,EAE1B,EA+N2J2G,QAAM,EAACP,MAAM,mDAGxInE,cAACgC,IAAG,CAACC,GAAG,IAAI0C,GAAG,KAAIzE,SACf4B,eAACiB,IAAS,CAAA7C,SAAA,CACN4B,eAACU,IAAK,CAACQ,IAAI,UAAS9C,SAAA,CAAC,WAAQF,cAAA,QAAMK,MAAO,CAAE8B,MAAO,OAAQjC,SAAC,SAExDzB,GAAgBqB,OAASE,cAAC4E,IAAM,CAC5BC,OAAQ,CACJC,QAAS,SAACC,EAAMC,GAAK,OAAAnJ,wBAAA,GACdkJ,GAAI,IACPE,YAAa,WAAS,GAG9BC,cAAe,IACfC,MAAOC,IACPnF,UAAU,eACVoF,gBAAgB,SAChB5F,KAAK,UACLiD,UAAQ,EACRpD,SA/P1B,SAAC2E,GACnB,IAAMqB,GAAUrB,EAAKrE,MACrB9C,EAAYjB,wBAAC,CAAC,EAAIgB,GAAS,IAAEI,QAASgH,EAAKE,MAAON,QAAShF,GAAYyG,GAAQzB,QAASpD,KAAM5B,GAAYyG,GAAQC,eACtH,EA8PgDC,QAAS/G,GACTgH,aAAa,IACZzF,cAACyC,IAAK,CACPG,KAAK,OACLF,UAAQ,EACRpD,SAAUA,GACVM,MAAO/C,EAAUI,QACjB6F,SAAUhF,EACV2B,KAAK,UACLkD,YAAY,YAEnBvF,EAAOH,UAAYJ,EAAUI,SAAW+C,cAAA,SAAOK,MAAO,CAAE8B,MAAO,OAAQjC,SAAC,6BAGjFF,cAACgC,IAAG,CAACC,GAAG,IAAI0C,GAAG,KAAIzE,SACf4B,eAACiB,IAAS,CAAA7C,SAAA,CACN4B,eAACU,IAAK,CAACQ,IAAI,UAAS9C,SAAA,CAAC,WAAQF,cAAA,QAAMK,MAAO,CAAE8B,MAAO,OAAQjC,SAAC,SAC5DF,cAACyC,IAAK,CAACnD,SAAUA,GAAUsD,KAAK,OAAOF,UAAQ,EAACjD,KAAK,UAAUG,MAAO/C,EAAUgH,QAASf,SAAUhF,EAAgByF,GAAG,UAAUZ,YAAY,iBAIpJ3C,cAACgC,IAAG,CAACC,GAAG,IAAI0C,GAAG,KAAIzE,SACf4B,eAACiB,IAAS,CAAA7C,SAAA,CACN4B,eAACU,IAAK,CAACQ,IAAI,OAAM9C,SAAA,CAAC,QAAKF,cAAA,QAAMK,MAAO,CAAE8B,MAAO,OAAQjC,SAAC,SACtDF,cAACyC,IAAK,CAACnD,SAAUA,GAAUsD,KAAK,OAAOF,UAAQ,EAACjD,KAAK,OAAOG,MAAO/C,EAAU4D,KAAMqC,SAAUhF,EAAgByF,GAAG,OAAOZ,YAAY,sBAOvJ3C,cAACgC,IAAG,CAACC,GAAG,KAAI/B,SACRF,cAAA,SAAAE,SAAO,oFAGXF,cAACgC,IAAG,CAACC,GAAG,KAAKhC,UAAU,cAAaC,SAC/BjB,GAAS6C,eAAC0B,IAAOkC,OAAM,CAACzF,UAAU,OAAOkC,MAAM,UAAUW,UAAQ,EAACzC,MAAO,CAAEsF,UAAW,QAASzF,SAAA,CAC5FF,cAAC2D,IAAO,CAACL,KAAK,OACdtD,cAAA,QAAMC,UAAU,qBAAoBC,SAAC,kBACtB4B,eAAC0B,IAAOkC,OAAM,CAACzF,UAAU,OAAOkC,MAAM,UAAU9B,MAAO,CAAEsF,UAAW,QAAU/C,KAAK,SAAQ1C,SAAA,CAC1GF,cAAC4F,IAAI,CAACtC,KAAM,KACZtD,cAAA,QAAMC,UAAU,qBAAoBC,SAAC,wBASrE,C,mUCrWM2F,EAAe,SAAHC,GAAA,IAAMrG,EAAIqG,EAAJrG,KAAMsG,EAAID,EAAJC,KAAI,OAChCjE,eAACkE,WAAQ,CAAA9F,SAAA,CACPF,cAAA,OAAKC,UAAU,kBAAiBC,SAC9B4B,eAAA,OAAK7B,UAAU,gBAAeC,SAAA,CAC5BF,cAACiG,IAAM,CAAC3C,KAAK,KAAKnB,MAAM,UAAU+D,KAAMlG,cAACmG,IAAM,CAAC7C,KAAM,OACtDxB,eAAA,MAAI7B,UAAU,+BAA8BC,SAAA,CAAC,YAAUT,UAG3DO,cAAA,OAAKC,UAAU,gBAAeC,SAC5B4B,eAAA,QAAA5B,SAAA,CAAM,yCAAuC6F,EAAK,+DAE3C,EA8WEK,EA3WQ,WACnB,IAAMC,EAAUC,qBAAWC,KAE3BC,EAAwBC,cAASC,EAAA9J,YAAA4J,EAAA,GAA1BG,EAAID,EAAA,GAELE,GAFcF,EAAA,GAEJG,eAEVC,EAAWC,cAEjBC,EAAoDC,cAEpDzL,GAFgBwL,EAARE,SAAgBF,EAAN5J,OAAoB4J,EAAZG,aAAqBH,EAAPI,QAENxL,mBAAS,CAAC,IAAEe,EAAAC,YAAApB,EAAA,GAC9CuB,GADgBJ,EAAA,GAAcA,EAAA,GACEf,mBAAS,CAAC,IAAEuB,EAAAP,YAAAG,EAAA,GAC5CO,GADeH,EAAA,GAAaA,EAAA,GACcvB,mBAAS,KAAG2B,EAAAX,YAAAU,EAAA,GACtDE,GADoBD,EAAA,GAAkBA,EAAA,GACV3B,oBAAS,IAAM6B,EAAAb,YAAAY,EAAA,GAApC6J,EAAM5J,EAAA,GAAE6J,EAAS7J,EAAA,GACxBG,EAA4BhC,mBAAS,GAAEiC,EAAAjB,YAAAgB,EAAA,GACvCI,GADaH,EAAA,GAAWA,EAAA,GACIjC,oBAAS,IAAMqC,EAAArB,YAAAoB,EAAA,GACrCuJ,GADOtJ,EAAA,GAAWA,EAAA,GACTuJ,uBACTC,EAAWC,wBAGXC,GAFYC,iBAAO,MAEI,CACzBvH,MAAO,CACL0E,KAAM,CACJ8C,WAAY,OACZ1F,MAAO,UACP2F,SAAU,SACV,gBAAiB,CACf3F,MAAO,YAGX4F,QAAS,CACP5F,MAAO,UACP6F,UAAW,cASjB7J,EAAkCvC,mBAAQC,wBAAC,CAAC,EACvCC,KAAKC,MAAMC,aAAaC,QAAQ,uBAAqB,IAYxDgM,UAAW,GACXC,YAAa,GACbC,aAAc,GACdC,YAAa,GACbC,SAAU,GACVC,gBAAiB,GACjB7L,kBAAmB,EACnBC,SAAU,aACZ0B,EAAAxB,YAAAuB,EAAA,GArBOoK,EAASnK,EAAA,GAyCZoK,IAzC0BpK,EAAA,GA0CnB,SAATuI,EAAkB,uBAAyB,mBAGzCpG,IAFOkI,OAAQ,KAADnG,OAA6BkG,KAAgBE,QAEnD,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,EAAOxJ,GAAC,IAAAyJ,EAAA,OAAAH,cAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAsCN,GArCf7J,EAAEiB,iBAqCF8G,GAAU,GACLC,GAAWE,EAAQ,CAAAyB,EAAAE,KAAA,QAGJ,OAAhB9B,GAAU,GAAM4B,EAAAG,OAAA,iBAWW,OAPzBL,EAAmB,CACrBpG,KAAM,OACN0G,KAAM7B,EAAS8B,WAAWC,sBAK5B3I,QAAQC,IAAIkI,GAAiBE,EAAAE,KAAA,EACvB7B,EAAOkC,oBAAoBT,GAAkB/H,KAAI,eAAAyI,EAAAd,YAAAC,cAAAC,MAAC,SAAAa,EAAOrI,GAAI,IAAAsI,EAAA,OAAAf,cAAAI,MAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,OASrC,OAJ1BvI,QAAQC,IAAIQ,EAAKwI,cAAcvG,IAC/B1C,QAAQC,IAAGjF,wBAAC,CAAC,EAAI0M,GAAS,IAAED,gBAAiBhH,EAAKwI,cAAcvG,MAG1DqG,EAAoB,eAAAG,EAAAnB,YAAAC,cAAAC,MAAG,SAAAkB,EAAOpI,GAAQ,IAAAqI,EAAAC,EAAAC,EAAAC,EAAA,OAAAvB,cAAAI,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,WACtCxH,EAASF,MAAM,CAAD2I,EAAAjB,KAAA,QAEhB9B,GAAU,GACVgD,MAAM1I,EAASF,OAAM2I,EAAAjB,KAAA,oBACZxH,EAAS2I,eAAe,CAADF,EAAAjB,KAAA,gBAAAiB,EAAAjB,KAAA,EAGxB7B,EAAOiD,iBAAiB5I,EAAS6I,cAAa,OAAAR,EAAAI,EAAAK,KADvCR,EAAWD,EAAlBvI,MAAoByI,EAAaF,EAAbE,cAExBD,GAEF5C,GAAU,GACVgD,MAAMJ,IAINnJ,IAAO4J,YACL,CACEC,gBAA8B,OAAbT,QAAa,IAAbA,OAAa,EAAbA,EAAe5G,KAC/BtC,KAAI,eAAA4J,EAAAjC,YAAAC,cAAAC,MAAC,SAAAgC,EAAM5J,GAAG,IAAA6J,EAAA,OAAAlC,cAAAI,MAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,OACT2B,EAAW7J,EAAII,KAAKC,QAC1BqI,EAAqBmB,GAAS,wBAAAC,EAAAC,OAAA,GAAAH,EAAA,KAC/B,gBAAAI,GAAA,OAAAL,EAAAM,MAAA,KAAAC,UAAA,EAHM,IAGJ3J,OAAM,SAAA5B,GACP8B,MAAM9B,EACR,IACHwK,EAAAjB,KAAA,iBA6CoC,OA1CrC9B,GAAU,GAGVzG,QAAQC,IAAIc,EAASL,QAAQD,MAEvBA,EAAIzF,wBAAA,GACL+F,EAASL,QAAQD,KAAK+J,WAAS,IAElCC,YAAa1J,EAASL,QAAQD,KAAKiK,MACnCC,aAAc5J,EAASL,QAAQD,KAAKiK,MACpCE,OAAQ,CACNC,wBAAyB,GAE3B3F,KAAM,SACNM,QAAS,CACP,CACEsF,OAAQ,SACRC,QAAS,UAEX,CACED,OAAQ,SACRC,QAAS,WAKf9E,EAAS+E,YAAYvK,IACrB+E,EAAQyF,OAAOxK,EAAK+E,SAEpB0F,IAAMC,QACJhM,cAAC6F,EAAY,CAACpG,KAAM6B,EAAK2K,SAAUlG,KAAMzE,EAAKyE,OAC9C,CAAEmG,WAAYC,IAAOC,iBAAiB,EAAMC,UAAW,MAUzDrQ,aAAasQ,QAAQ,eAAe,GACpCtQ,aAAasQ,QAAQ,WAAW,GAAKjC,EAAAjB,KAAA,GAC/BrI,IAAOwL,YAAY,CAAEN,SAAUO,IAAUC,SAAUC,MAAYzL,MAAK,SAAAC,GACxElF,aAAasQ,QAAQ,WAAYpL,EAAII,KAAKqL,UAC1C3Q,aAAasQ,QAAQ,WAAW,EAClC,IAAG7K,OAAM,SAAA5B,GACP7D,aAAasQ,QAAQ,WAAW,GAChCzL,QAAQC,IAAIjB,EACd,IAAE,eAAAwK,EAAAjB,KAAA,GAEIrI,IAAO6L,+BAA+B,CAAEC,OAAQC,OAAOlL,EAASL,QAAQD,KAAK+J,UAAU0B,YAAa9L,MAAK,SAAAC,GAC7GL,QAAQC,IAAII,GACZlF,aAAasQ,QAAQ,qBAAsBxQ,KAAKkR,UAAU9L,EAAII,KAAKC,UACnEqF,EAAQqG,KAAKC,YAA4B5L,EAAKyE,MAChD,IAAGtE,OAAM,SAAA5B,GACP8B,MAAM9B,GACNgB,QAAQC,IAAIjB,EACd,IAAE,yBAAAwK,EAAAY,OAAA,GAAAjB,EAAA,KAEL,gBAxFyBmD,GAAA,OAAApD,EAAAoB,MAAA,KAAAC,UAAA,KAAAvB,EAAAT,KAAA,EA2FhBrI,IAAOC,6BAA4BnF,wBAAC,CAAC,EAAI0M,GAAS,IAAED,gBAAiBhH,EAAKwI,cAAcvG,MAAMtC,KAAI,eAAAmM,EAAAxE,YAAAC,cAAAC,MAAC,SAAAuE,EAAMnM,GAAG,IAAA6J,EAAA,OAAAlC,cAAAI,MAAA,SAAAqE,GAAA,cAAAA,EAAAnE,KAAAmE,EAAAlE,MAAA,OAChHvI,QAAQC,IAAII,GACN6J,EAAW7J,EAAII,KAAKC,QAC1BqI,EAAqBmB,GAAS,wBAAAuC,EAAArC,OAAA,GAAAoC,EAAA,KAEhC,gBAAAE,GAAA,OAAAH,EAAAjC,MAAA,KAAAC,UAAA,EALwG,IAKtG3J,OAAM,SAAAC,GACR4F,GAAU,GACV3F,MAAMD,EAAME,UAENf,QAAQC,IAAIY,EAAME,SAE1B,IAAE,wBAAAiI,EAAAoB,OAAA,GAAAtB,EAAA,KAIP,gBAAA6D,GAAA,OAAA9D,EAAAyB,MAAA,KAAAC,UAAA,EAnHsD,IAmHpD3J,OAAM,SAAAlC,GACPsB,QAAQC,IAAIvB,EACd,IAAE,wBAAA2J,EAAA+B,OAAA,GAAAlC,EAAA,KAGP,gBA9Ka0E,GAAA,OAAA9E,EAAAwC,MAAA,KAAAC,UAAA,MAgLd,OACIpL,cAAA,OAAKC,UAAU,GAAEC,SAEbF,cAACI,IAAI,CACDuL,OAAO,IACP1L,UAAU,qBACVM,SAAUA,GAASL,SAEnB4B,eAACC,IAAG,CAAA7B,SAAA,CAgBAF,cAACgC,IAAG,CAAC2C,GAAG,KAAIzE,SACR4B,eAACiB,IAAS,CAAA7C,SAAA,CACNF,cAACwC,IAAK,CAACvC,UAAU,aAAa+C,IAAI,eAAc9C,SAAC,gBAGjDF,cAACwJ,oBAAiB,CACd5G,KAAK,OACLhD,MAAO2I,EAAUL,YACjBvF,YAAY,WACZY,GAAG,YACH9D,KAAK,eACL+F,QAASmC,EACT+F,OAAQ,WACJ7M,QAAQC,IAAI,2BAA4B6M,MAAMnO,OAAOI,MACvD,SAMdI,cAACgC,IAAG,CAAC2C,GAAG,IAAGzE,SACP4B,eAACiB,IAAS,CAAA7C,SAAA,CACNF,cAACwC,IAAK,CAACvC,UAAU,aAAa+C,IAAI,cAAa9C,SAAC,gBAGhDF,cAAC4N,oBAAiB,CACdhL,KAAK,OACLhD,MAAO2I,EAAUH,YACjBzF,YAAY,UACZY,GAAG,SACH9D,KAAK,SACL+F,QAASmC,SAOrB3H,cAACgC,IAAG,CAAC2C,GAAG,IAAGzE,SACP4B,eAACiB,IAAS,CAAA7C,SAAA,CACNF,cAACwC,IAAK,CAACvC,UAAU,aAAa+C,IAAI,eAAc9C,SAAC,QAGjDF,cAAC6N,iBAAc,CACXjL,KAAK,OACLhD,MAAO2I,EAAUF,SACjB1F,YAAY,UACZY,GAAG,MACH9D,KAAK,MACL+F,QAASmC,SAOrB3H,cAACgC,IAAG,CAACC,GAAG,KAAKhC,UAAU,cAAaC,SAC3BmH,EAASvF,eAAC0B,IAAOkC,OAAM,CAACzF,UAAU,OAAOkC,MAAM,UAAUW,UAAQ,EAACzC,MAAO,CAAEsF,UAAW,QAASzF,SAAA,CAC5FF,cAAC2D,IAAO,CAACL,KAAK,OACdtD,cAAA,QAAMC,UAAU,qBAAoBC,SAAC,kBACtB4B,eAAC0B,IAAOkC,OAAM,CAACzF,UAAU,OAAOkC,MAAM,UAAU9B,MAAO,CAAEsF,UAAW,QAAU/C,KAAK,SAAQ1C,SAAA,CAC1GF,cAAC4F,IAAI,CAACtC,KAAM,KACZtD,cAAA,QAAMC,UAAU,qBAAoBC,SAAC,sBAYrE,ECvGe4N,IAlRW,WACNxH,qBAAWC,KAA3B,IAEAC,EAAwBC,cAASC,EAAA9J,YAAA4J,EAAA,GAA1BG,EAAID,EAAA,GAMXM,GANoBN,EAAA,GAEJG,cAECE,cAEmCE,eAEpDzL,GAFgBwL,EAARE,SAAgBF,EAAN5J,OAAoB4J,EAAZG,aAAqBH,EAAPI,QAENxL,mBAAS,CAAC,IAAEe,EAAAC,YAAApB,EAAA,GAC9CuB,GADgBJ,EAAA,GAAcA,EAAA,GACEf,mBAAS,CAAC,IAAEuB,EAAAP,YAAAG,EAAA,GAC5CO,GADeH,EAAA,GAAaA,EAAA,GACcvB,mBAAS,KAAG2B,EAAAX,YAAAU,EAAA,GAA/CyQ,EAAaxQ,EAAA,GAAEyQ,EAAgBzQ,EAAA,GACtCC,EAA4B5B,oBAAS,GAAM6B,EAAAb,YAAAY,EAAA,GAApC6J,EAAM5J,EAAA,GAAE6J,EAAS7J,EAAA,GACxBG,EAA4BhC,mBAAS,GAAEiC,EAAAjB,YAAAgB,EAAA,GAAhCqQ,EAAMpQ,EAAA,GAAEqQ,EAASrQ,EAAA,GAGlBsQ,EAAYvG,iBAAO,MAEzB5J,EAAkCpC,mBAAQC,wBAAC,CAAC,EACrCC,KAAKC,MAAMC,aAAaC,QAAQ,uBAAqB,IAiBxDQ,kBAAmB,KAErBwB,EAAArB,YAAAoB,EAAA,GApBcC,EAAA,GAAcA,EAAA,GAsB9BmQ,oBAASxF,YAAAC,cAAAC,MAAC,SAAAkB,IAAA,OAAAnB,cAAAI,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACNvI,QAAQC,IAAI,oBACZC,IAAOsN,aAAapN,KAAI,eAAA0H,EAAAC,YAAAC,cAAAC,MAAC,SAAAgC,EAAM5J,GAAG,IAAA6J,EAAA,OAAAlC,cAAAI,MAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,OACxB2B,EAAW7J,EAAII,KAAKC,QAC1ByM,EAAiBM,YAAWvD,EAASwD,iBACrCjH,GAAU,GACVzG,QAAQC,IAAIiK,GACZlK,QAAQC,IAAI,0BAAyB,wBAAAkK,EAAAC,OAAA,GAAAH,EAAA,KAExC,gBAAA2C,GAAA,OAAA9E,EAAAwC,MAAA,KAAAC,UAAA,EAPuB,IAOrB3J,OAAM,SAAA5B,GACLgB,QAAQC,IAAI,2BACZD,QAAQC,IAAIjB,GACZ8B,MAAM9B,EACV,IAEAqO,EAAUM,WAAW,KAAI,wBAAAnE,EAAAY,OAAA,GAAAjB,EAAA,KAC1B,IAEH,IAAMxB,EACO,SAAT7B,EAAkB,uBAAyB,kBAClC8B,OAAQ,KAADnG,OAA6BkG,IAAgBE,QAyHjE,OACI1I,cAAA,OAAKC,UAAU,GAAEC,SACZmH,EAASvF,eAAC2M,WAAQ,CAAClH,OAAQwG,EAAc7N,SAAA,CAE1CF,cAACoG,EAAc,CAAC6H,OAAQA,EAAQE,UAAWA,IAyE3CrM,eAAA,KAAG7B,UAAU,mBAAkBC,SAAA,CAC3BF,cAAA,QAAMC,UAAU,QAAOC,SAAC,6BACxBF,cAAC0O,IAAI,CAACC,GAAG,SAAQzO,SACbF,cAAA,QAAAE,SAAM,4BAGCF,cAAA,OAAKC,UAAU,gCAA+BC,SACzDF,cAAC2D,IAAO,CAAC1D,UAAU,YAKnC,C,mKCjQe2O,UAlCK,WAClB,IAAApT,EAAkCI,mBAAS,KAAIe,EAAAC,YAAApB,EAAA,GAAxCqT,EAASlS,EAAA,GAAEmS,EAAYnS,EAAA,GACxBoS,EAAS,SAAAC,GAAG,OAAIF,EAAaE,EAAI,EACjCC,EAAWnT,KAAKC,MAAMC,aAAaC,QAAQ,sBACjD,OACE+D,cAACG,IAAI,CAACE,MAAO,CAAE6O,SAAU,SAAWjP,UAAU,eAAcC,SAC1D4B,eAACqN,IAAQ,CAAClP,UAAU,OAAMC,SAAA,CACxB4B,eAACsN,IAAG,CAACC,OAAK,EAACpP,UAAU,qBAAoBC,SAAA,CACvCF,cAACsP,IAAO,CAAApP,SACNF,cAACuP,IAAO,CAACC,OAAsB,MAAdX,EAAmBjL,QAAS,kBAAMmL,EAAO,IAAI,EAAC7O,SAC7DF,cAAA,QAAMC,UAAU,iCAAgCC,SAAC,4BAIhC,OAArB+O,EAASpL,SAAqB7D,cAACsP,IAAO,CAAApP,SACtCF,cAACuP,IAAO,CAACC,OAAsB,MAAdX,EAAmBjL,QAAS,kBAAMmL,EAAO,IAAI,EAAC7O,SAC7DF,cAAA,QAAMC,UAAU,iCAAgCC,SAAC,+BAKrD4B,eAAC2N,IAAU,CAACZ,UAAWA,EAAU3O,SAAA,CAC/BF,cAAC0P,IAAO,CAACC,MAAM,IAAGzP,SAChBF,cAAC8N,IAAiB,MAEpB9N,cAAC0P,IAAO,CAACC,MAAM,IAAGzP,SAChBF,cAAC5E,IAAU,aAMvB,C,mCCzCA,wHAGiBuG,EAAQ,SAAC9B,GAClB,IACI,IAAMN,EAAIM,EAAI+B,SACG,MAAbrC,EAAEqQ,QAA+B,MAAbrQ,EAAEqQ,QAA+B,MAAbrQ,EAAEqQ,QAA+B,MAAbrQ,EAAEqQ,QAA+B,MAAbrQ,EAAEqQ,OAClF7D,IAAMrK,MAAMnC,EAAE+B,KAAKiB,QAAS,CAC5BsN,SAAU,YACVxD,UAAW,IACXD,iBAAiB,EACjB0D,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAGVnE,IAAMrK,MAAM,kCAAmC,CAC3CmO,SAAU,YACVxD,UAAW,IACXD,iBAAiB,EACjB0D,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,GAGtB,CAAE,MAAO3Q,GACLwM,IAAMrK,MAAM,+BAAgC,CACxCmO,SAAU,YACVxD,UAAW,IACXD,iBAAiB,EACjB0D,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,GAElB,CAEJ,EAEaC,EAAe,SAACtQ,GACzB,IACA,IAAMN,EAAIM,EAAI+B,SACG,MAAbrC,EAAEqQ,QAA+B,MAAbrQ,EAAEqQ,QAA+B,MAAbrQ,EAAEqQ,QAC1C7D,IAAMrK,MAAMnC,EAAE+B,KAAKlE,OAASmC,EAAE+B,KAAKlE,OAAOgT,OAAOC,KAAK9Q,EAAE+B,KAAKlE,QAAQ,IAAMmC,EAAE+B,KAAKiB,QAAS,CAC3FsN,SAAU,YACVxD,UAAW,IACXD,iBAAiB,EACjB0D,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,GAGd,CAAE,MAAO3Q,GACLwM,IAAMrK,MAAM,+BAAgC,CACxCmO,SAAU,YACVxD,UAAW,IACXD,iBAAiB,EACjB0D,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,GAElB,CACJ,EACaI,EAAU,SAAC1O,GACpB,IAAMW,EAAUX,EAASN,KAAKiB,SAAW,UACzCwJ,IAAMC,QAAQzJ,EAAS,CACnBsN,SAAU,YACVxD,UAAW,IACXD,iBAAiB,EACjB0D,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,GAElB,C","file":"static/js/358.8abf3a15.chunk.js","sourcesContent":["import useJwt from '@src/auth/jwt/useJwt'\nimport { selectThemeColors } from '@utils'\nimport React, { useState } from 'react'\nimport { Search, Send } from 'react-feather'\nimport Select from 'react-select'\nimport { Alert, Button, Card, CardHeader, CardTitle, Col, CustomInput, Form, FormGroup, Input, InputGroup, InputGroupAddon, InputGroupText, Label, Row, Spinner } from 'reactstrap'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst MySwal = withReactContent(Swal)\n// import DirectDebitLogo from '../../../../assets/images/logo/DirectDebitLogo.png'\nimport { toast } from 'react-toastify'\nimport { Error } from '../../viewhelper'\n\nconst GoCardless = (props) => {\n    const { setConditionalRendering, showCompanyName, setshowCompanyName, continueBtn, setcontinueBtn } = props\n    const [userinput, setuserinput] = useState({\n        ...JSON.parse(localStorage.getItem('registration_data')),\n        isnewaccount: true,\n        isibn: false,\n        accountnumber: \"\",\n        // address: \"\",\n        // city: \"\",\n        // companyname: \"\",\n        // country: \"\",\n        // email: \"\",\n        // firstname: \"\",\n        // lastname: \"\",\n        // postcode: \"\",\n        sortcode: \"\",\n        accountholdername: \"\",\n        // customerid: \"\",\n        isneedmorethenonepersontoauth: false,\n        addpaymentid: 0,\n        payment_method_id: 1,\n        sub_type: \"monthly\"\n    })  \n    const [errors, setErrors] = useState({\n        email: false,\n        address: false,\n        accountNumber: false,\n        sortcode: false\n    })\n    const [isloading, setisloading] = useState(false)\n    const [showCustomPostCode, setshowCustomPostCode] = useState(false)\n    const [CustomPostCode, setCustomPostCode] = useState(true)\n    const [PostCodeError, setPostCodeError] = useState(false)\n    const [postcodefetching, setpostcodefetching] = useState(false)\n    const [businessaddress, setbusinessaddress] = useState([])\n    const [tempaddress, settempaddress] = useState([])\n    const [loader, setLoader] = useState(false)\n    const [ErrorTexts, setErrorTexts] = useState([])\n\n    const onChange = (e) => {\n        // if (e.target.name === 'postcode') {\n        //     const chkLength = /^.{6,8}$/.test(e.target.value)\n        //     if (chkLength) {\n        //         setPostCodeError(false)\n        //     } else { setPostCodeError(true) }\n        //     // console.log(chkLength)\n        // }\n        if (e.target.name === 'email') {\n            const chkEmail = /\\S+@\\S+\\.\\S+/.test(e.target.value)\n            const err = { ...errors }\n            !chkEmail ? err.email = true : err.email = false\n            setErrors({ ...err })\n        }\n        if (e.target.name === 'sortcode') {\n            const err = { ...errors }\n            e.target.value.length !== 6 ? err.sortcode = true : err.sortcode = false\n            setErrors({ ...err })\n        }\n        if (e.target.name === 'accountnumber') {\n            const err = { ...errors }\n            e.target.value.length !== 8 ? err.accountNumber = true : err.accountNumber = false\n            setErrors({ ...err })\n        }\n        setuserinput({ ...userinput, [e.target.name]: e.target.value })\n    }\n\n\n    const addressChange = (item) => {\n        const index1 = +item.value\n        setuserinput({ ...userinput, address: item.label, country: tempaddress[index1].country, city: tempaddress[index1].town_or_city })\n    }\n\n    const handleCustomPostCode = (e) => {\n        setuserinput({ ...userinput, country: '', address: '', city: '' })\n        if (e.target.checked) {\n            setCustomPostCode(false)\n        } else {\n            setCustomPostCode(true)\n        }\n    }\n\n    const hanldeAuthPerson = (e) => {\n        if (e.target.checked) {\n            setuserinput({ ...userinput, isneedmorethenonepersontoauth: true })\n        } else {\n            setuserinput({ ...userinput, isneedmorethenonepersontoauth: false })\n        }\n    }\n\n    const searchPostcode = () => {\n        if (userinput.postcode) {\n            setpostcodefetching(true)\n            setbusinessaddress([])\n            setuserinput({ ...userinput, address: '', country: '', city: '' })\n            useJwt.ukAddressEndpoint({ postCode: userinput.postcode }).then(res => {\n                const { addresses } = res.data.payload\n                console.log(addresses)\n                if (!addresses.length) {\n                    setshowCustomPostCode(true)\n                } else { setshowCustomPostCode(false) }\n                setCustomPostCode(true)\n                const data = addresses.map((item, index) => {\n                    const format = item.formatted_address.filter(item => item).splice(0, 1).toString()\n                    return { value: index, label: format }\n                })  //convert to string\n                setpostcodefetching(false)\n                setbusinessaddress(data)\n                settempaddress(addresses)\n                // setuserinput({ ...userinput })\n            })\n                .catch(err => {\n                    setpostcodefetching(false)\n                    Error(err)\n                    setshowCustomPostCode(true)\n                })\n        }\n    }\n\n    const handleContinue = () => {\n        setConditionalRendering({\n            showDDSForm: false,\n            showDDSDetails: true,\n            showDDSConfirmation: false\n        })\n    }\n    const onSubmit = (e) => {\n        e.preventDefault()\n        // if (!userinput.address && userinput.postcode) {\n        //     searchPostcode()\n        // }\n        // setcontinueBtn(true)\n        // const { IBAN, IBANsortCode, accountnumber, address, city, companyname, country, email, firstname, lastname, postcode, sortcode, accountholdername, customerid, isneedmorethenonepersontoauth } = userinput\n        const { accountnumber, address, city, email, firstname, lastname, postcode, sortcode, accountholdername } = userinput\n\n        const err = { ...errors }\n        !address ? err.address = true : err.address = false\n        setErrors({ ...err })\n\n        if (!address || errors.email || errors.sortcode || errors.accountNumber) {\n            return\n        }\n\n        setLoader(true)\n        console.log({\n            accountnumber, address, city, email, firstname, lastname, postcode, sortcode, accountholdername\n        })\n\n        \n        // useJwt.DDScreateCustomer({ address, city, email, firstname, lastname, postcode }).then(res => {\n        console.log(userinput)    \n        useJwt.customerBusinessRegistration({...userinput}).then(res => {\n            console.log(res)\n            window.location.href = res.data.payload.payment_url\n            // window.location.href = res.data.payload.payment_url\n            \n        }).catch(error => {\n            setLoader(false)\n            Error(error.response)\n                // console.log(error.response.data.message)\n                console.log(error.response)\n          \n        })\n    }\n    return (\n        <div className='m-0'>\n            <Card>\n                {/* <CardHeader className='border-bottom'>\n                    <CardTitle tag='h3'>Set Your Direct Debit Account First</CardTitle>\n                    <div>\n                    </div>\n                </CardHeader> */}\n                <Form className=\"p-2\" style={{ width: '100%' }} onSubmit={onSubmit} autoComplete=\"off\">\n                    <Row>\n                        {!!ErrorTexts.length && <Col md='12'>\n                            <Alert color='danger' className='p-1'>\n                                <ul>\n                                    {\n                                        ErrorTexts.map((err, i) => <li key={i}>{`${err.message}`}</li>)\n                                    }\n                                </ul>\n                            </Alert>\n                        </Col>}\n                        <Col md='4' className=\"mb-1\">\n                            <Label >{showCompanyName ? 'Company name' : 'First Name'}</Label>\n                            {!showCompanyName ? <Input\n                                required\n                                placeholder=\"Firstname\"\n                                type='text'\n                                name='firstname'\n                                value={userinput.firstname}\n                                onChange={onChange}\n                            /> : <Input\n                                required\n                                placeholder=\"Your Company Name\"\n                                type='text'\n                                name='companyname'\n                                value={userinput.companyname}\n                                onChange={onChange}\n                            />}\n                        </Col>\n\n                        {!showCompanyName && <Col md='4' className=\"mb-1\">\n                            <Label >Last Name</Label>\n                            <Input\n                                required\n                                placeholder=\"Lastname\"\n                                type='text'\n                                name='lastname'\n                                value={userinput.lastname}\n                                onChange={onChange}\n                            />\n                        </Col>}\n                        <Col md='4' className=\"mb-1\">\n                            <Label >Email</Label>\n                            <Input\n                                required\n                                placeholder=\"Your Email\"\n                                type='email'\n                                name='email'\n                                value={userinput.email}\n                                onChange={onChange}\n                            />\n                            {errors.email && <small style={{ color: 'red' }}>Please enter a valid email</small>}\n                        </Col>\n\n                        <Col md='4' className=\"mb-1\">\n                            <Label >Account Holder Name</Label>\n                            <Input\n                                required\n                                placeholder=\"Account Holder Name\"\n                                type='text'\n                                name='accountholdername'\n                                value={userinput.accountholdername}\n                                onChange={onChange}\n                                disabled={!userinput.isnewaccount}\n                            />\n                        </Col>\n                        <Col md='4' className=\"mb-1\">\n                            <Label >{userinput.isibn && 'IBAN'} Sort Code</Label>\n                            <Input\n                                required\n                                placeholder='Sort Code'\n                                type='number'\n                                name='sortcode'\n                                value={userinput.sortcode}\n                                onChange={onChange}\n                                disabled={!userinput.isnewaccount}\n                            />\n                            {errors.sortcode && <small style={{ color: 'red' }}>must be 6 character</small>}\n                        </Col>\n\n                        <Col md='4' className=\"mb-1\">\n                            <Label >{userinput.isibn ? 'IBAN' : 'Account Number'} </Label>\n                            <Input\n                                required\n                                placeholder='Account Number'\n                                type='number'\n                                name='accountnumber'\n                                value={userinput.accountnumber}\n                                onChange={onChange}\n                                disabled={!userinput.isnewaccount}\n                            />\n                            {errors.accountNumber && <small style={{ color: 'red' }}>must be 8 character</small>}\n                        </Col>\n\n                        <Col md='12'>\n                            <hr />\n                            <Card>\n                                <Row>\n                                    <Col md='4'>\n                                        <FormGroup>\n                                            <Label for='postcode'>Post Code<span style={{ color: 'red' }}>*</span></Label>\n                                            <InputGroup className='input-group-merge mb-1'>\n                                                <InputGroupAddon addonType='prepend'>\n                                                    <InputGroupText>\n                                                        <Search size={14} />\n                                                    </InputGroupText>\n                                                </InputGroupAddon>\n                                                <Input type='text'\n                                                    name='postcode'\n                                                    id='postcode'\n                                                    placeholder='Post Code'\n                                                    value={userinput.postcode}\n                                                    onChange={onChange}\n                                                    required\n                                                />\n                                                <InputGroupAddon addonType='append'>\n                                                    {postcodefetching ? <Button style={{ paddingBottom: '9px' }} color='primary' outline disabled>\n                                                        <Spinner color='primary' size='sm' />\n                                                    </Button> : <Button color='primary' outline onClick={searchPostcode}>\n                                                        Search\n                                                    </Button>\n                                                    }\n                                                </InputGroupAddon>\n                                                <div className=\"p-0 m-0 w-100\">\n                                                    {showCustomPostCode && !PostCodeError && <small style={{ color: 'red' }}> postcode notfound</small>}\n                                                </div>\n                                                <div className=\"p-0 m-0 w-100\">\n                                                    {PostCodeError && <small style={{ color: 'red' }}> postcode must be 6 to 8 character</small>}\n                                                </div>\n                                                {/* {errors && errors.postcode && <FormFeedback>{errors.postcode.message}</FormFeedback>} */}\n                                            </InputGroup>\n                                            {showCustomPostCode && <CustomInput type='checkbox' id={'postcode1'} value={'CPC'} onChange={handleCustomPostCode} inline label='Click here to enter your address manually' />}\n                                        </FormGroup>\n                                    </Col>\n                                    <Col md='3' sm='12'>\n                                        <FormGroup>\n                                            <Label for='address'>Address <span style={{ color: 'red' }}>*</span></Label>\n                                            {\n                                                businessaddress.length ? <Select\n                                                    styles={{\n                                                        control: (base, state) => ({\n                                                            ...base,\n                                                            borderColor: '#7367f0'\n                                                        })\n                                                    }}\n                                                    maxMenuHeight={150}\n                                                    theme={selectThemeColors}\n                                                    className='react-select'\n                                                    classNamePrefix='select'\n                                                    name=\"address\"\n                                                    required\n                                                    onChange={addressChange}\n                                                    // defaultValue={businessaddress[0]}\n                                                    options={businessaddress}\n                                                    isClearable={false}\n                                                /> : <Input\n                                                    type='text'\n                                                    required\n                                                    onChange={onChange}\n                                                    value={userinput.address}\n                                                    disabled={CustomPostCode}\n                                                    name='address'\n                                                    placeholder='Address' />\n                                            }\n                                            {errors.address && !userinput.address && <small style={{ color: 'red' }}>Address is required</small>}\n                                        </FormGroup>\n                                    </Col>\n                                    <Col md='3' sm='12'>\n                                        <FormGroup>\n                                            <Label for='country'>Country <span style={{ color: 'red' }}>*</span></Label>\n                                            <Input onChange={onChange} type='text' required name='country' value={userinput.country} disabled={CustomPostCode} id='country' placeholder='Country' />\n                                        </FormGroup>\n                                    </Col>\n\n                                    <Col md='2' sm='12'>\n                                        <FormGroup>\n                                            <Label for='city'>City <span style={{ color: 'red' }}>*</span></Label>\n                                            <Input onChange={onChange} type='text' required name='city' value={userinput.city} disabled={CustomPostCode} id='city' placeholder='City' />\n                                        </FormGroup>\n                                    </Col>\n                                </Row>\n                            </Card>\n                        </Col>\n\n                        <Col md='12' >\n                            <small>You may cancel this Direct Debit at any time by contacting Rilac or your bank</small>\n                        </Col>\n\n                        <Col md='12' className='text-center'>\n                            {loader ? <Button.Ripple className='ml-2' color='primary' disabled style={{ marginTop: '22px' }}>\n                                <Spinner size='sm' />\n                                <span className='align-middle ml-50'>Loading...</span>\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' style={{ marginTop: '22px' }} type=\"submit\">\n                                <Send size={15} />\n                                <span className='align-middle ml-50'>Submit</span>\n                            </Button.Ripple>}\n\n                        </Col>\n                    </Row>\n                </Form>\n            </Card>\n        </div>\n    )\n}\n\nexport default GoCardless","import { useSkin } from \"@hooks/useSkin\"\nimport useJwt from \"@src/auth/jwt/useJwt\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport \"@styles/base/pages/page-auth.scss\"\nimport Avatar from '@components/avatar'\nimport { isObjEmpty, selectThemeColors, getHomeRouteForLoggedInUser } from \"@utils\"\nimport classnames from \"classnames\"\nimport { Fragment, useContext, useEffect, useRef, useState } from \"react\"\nimport { Coffee, Plus, Send } from \"react-feather\"\nimport { useForm } from \"react-hook-form\"\nimport { useDispatch } from \"react-redux\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport { Slide, toast } from 'react-toastify'\nimport Select from 'react-select'\nimport {\n    Button, Col, CustomInput,\n    Form,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    Spinner\n} from \"reactstrap\"\nimport pms from '../../../assets/images/icons/RILAC-Logo.svg'\nimport { PaymentElement, CardNumberElement, CardExpiryElement, CardCvcElement, useStripe, useElements, Elements } from '@stripe/react-stripe-js'\nimport { KeyboardReturn } from \"@mui/icons-material\"\nimport { loadStripe } from \"@stripe/stripe-js\"\nimport { handleLogin } from \"../../../redux/actions/auth\"\nimport {BMS_USER, BMS_PASS} from '../../../Configurables'\n\nconst ToastContent = ({ name, role }) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n        <h6 className='toast-title font-weight-bold'>Welcome, {name}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span>You have successfully logged in as an {role} user to system. Now you can start to explore. Enjoy!</span>\n    </div>\n  </Fragment>\n)\n\nconst PaypalCardForm = () => {\n    const ability = useContext(AbilityContext)\n\n    const [skin, setSkin] = useSkin()\n\n    const history = useHistory()\n\n    const dispatch = useDispatch()\n\n    const { register, errors, handleSubmit, trigger } = useForm()\n\n    const [valErrors, setValErrors] = useState({})\n    const [docerror, setdocerror] = useState({})\n    const [stripePromise, setStripePromise] = useState('')\n    const [isLoad, setIsLoad] = useState(false)\n    const [amount, setAmount] = useState(0)\n    const [loader, setLoader] = useState(false)\n    const stripe = useStripe()\n    const elements = useElements()\n    const childFunc = useRef(null)\n\n    const CARD_ELEMENT_OPTIONS = {\n        style: {\n          base: {\n            lineHeight: \"27px\",\n            color: \"#212529\",\n            fontSize: \"1.1rem\",\n            \"::placeholder\": {\n              color: \"#aab7c4\"\n            }\n          },\n          invalid: {\n            color: \"#fa755a\",\n            iconColor: \"#fa755a\"\n          }\n        }\n      }\n\n      const handleSuccessAlert = () => {\n        setDisabledModal(!disabledModal)\n      }\n\n      const [userInput, setUserInput] = useState({\n        ...JSON.parse(localStorage.getItem('registration_data')),\n        // businessname: '',\n        // email: '',\n        // mobile: '',\n        // password: '',\n        // country: 'UK',\n        // businesscategoryids: 0,\n        // status: 1,\n        // logo: '',\n        // city: '',\n        // city_id: 0,\n        // web_login: true,\n        card_name: '',\n        card_number: '',\n        card_address: '',\n        card_expiry: '',\n        card_cvc: '',\n        paymentMethodId: '',\n        payment_method_id: 2,\n        sub_type: \"monthly\"\n    })\n\n    // useEffect(async () => {\n    //     console.log(\"start use effect\")\n    //     useJwt.stripeData().then(async res => {\n    //         const payload1 = res.data.payload\n    //         setStripePromise(loadStripe(payload1.publishableKey))\n    //         setIsLoad(true)\n    //         console.log(payload1)\n    //         console.log(\"inside then use effect\")\n\n    //     }).catch(err => {\n    //         console.log(\"inside catch use effect\")\n    //         console.log(err)\n    //         Error(err)\n    //     })\n    //     // setAmount(parseFloat(localStorage.getItem('amount')))\n    //     setAmount(parseFloat(50))\n    // }, [])\n\n    const illustration =\n        skin === \"dark\" ? \"register-v2-dark.svg\" : \"register-v2.svg\",\n        source = require(`@src/assets/images/pages/${illustration}`).default\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n        // console.log({\n        //     mobile: mobileNumber,\n        //     email,\n        //     firstname: firstName,\n        //     lastname: lastName\n        // })\n        // if (isObjEmpty(errors)) {\n        //     useJwt\n        //         .merchentregister({\n        //             mobile: mobileNumber,\n        //             email,\n        //             firstname: firstName,\n        //             lastname: lastName\n        //         })\n        //         .then((res) => {\n        //             console.log(res.data, res.data.payload, \"showing response\")\n\n        //             if (\n        //                 res.data.issuccess &&\n        //                 res.data.payload.mobile_match &&\n        //                 res.data.payload.is_registered\n        //             ) {\n        //                 history.push(\"/login\")\n        //             } else if (\n        //                 res.data.issuccess &&\n        //                 res.data.payload.mobile_match &&\n        //                 res.data.payload.is_registered === false\n        //             ) {\n        //                 localStorage.setItem(\"mobilenumber\", mobileNumber)\n        //                 history.push(\"/merchantsetpassword\")\n        //             }\n        //         })\n        //         .catch((err) => console.log(err))\n        // }\n        \n        //un comment down\n        setIsLoad(true)\n        if (!stripe || !elements) {\n            // Stripe.js has not yet loaded.\n            // Make sure to disable form submission until Stripe.js has loaded.\n            setIsLoad(false)\n            return\n        }\n\n        const paymentMethodObj = {\n            type: 'card',\n            card: elements.getElement(CardNumberElement)\n            // billing_details: {\n            //   name\n            // }\n          }\n          console.log(paymentMethodObj)\n          await stripe.createPaymentMethod(paymentMethodObj).then(async (data) => {\n\n            // if (!data.error) {\n\n              // console.log(data)\n              console.log(data.paymentMethod.id)\n              console.log({ ...userInput, paymentMethodId: data.paymentMethod.id })\n              // setUserInput({ ...userInput, paymentMethodId: data.paymentMethod.id })\n\n              const handleServerResponse = async (response) => {\n                if (response.error) {\n                  // Show error from server on payment form\n                  setIsLoad(false)\n                  alert(response.error)\n                } else if (response.requiresAction) {\n                  // Use Stripe.js to handle the required card action\n                  const { error: errorAction, paymentIntent } =\n                    await stripe.handleCardAction(response.clientSecret)\n                  if (errorAction) {\n                    // Show error from Stripe.js in payment form\n                    setIsLoad(false)\n                    alert(errorAction)\n                  } else {\n                    // The card action has been handled\n                    // The PaymentIntent can be confirmed again on the server\n                    useJwt.payByStripe(\n                      {\n                        paymentIntentId: paymentIntent?.id\n                      }).then(async res => {\n                        const payload1 = res.data.payload\n                        handleServerResponse(payload1)\n                      }).catch(err => {\n                        Error(err)\n                      })\n                  }\n                } else {\n                  // Show success message\n                  setIsLoad(false)\n                  // handleSuccessAlert()\n        \n                  console.log(response.payload.data)\n        \n                  const data = {\n                    ...response.payload.data.user_info,\n                    // avatar: \"https://i.imgur.com/P4b2RHh.png\",\n                    accessToken: response.payload.data.token,\n                    refreshToken: response.payload.data.token,\n                    extras: {\n                      eCommerceCartItemsCount: 5\n                    },\n                    role: 'vendor',\n                    ability: [\n                      {\n                        action: 'manage',\n                        subject: 'VENDOR'\n                      },\n                      {\n                        action: 'manage',\n                        subject: 'Auth'\n                      }\n                    ]\n                  }\n        \n                  dispatch(handleLogin(data))\n                  ability.update(data.ability)\n                  // localStorage.setItem('username', email)\n                  toast.success(\n                    <ToastContent name={data.username} role={data.role} />,\n                    { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n                  )\n        \n                  // await useJwt.getPMStoken({ username: \"dddd\", module: \"kkk\" }).then(res => {\n                  //   localStorage.setItem('PMStoken', res.data.data.access_token)\n                  //   localStorage.setItem(\"usePMStoken\", false)\n                  // }).catch(err => {\n                  //   console.log('getPMStoken', err)\n                  // })\n        \n                  localStorage.setItem(\"usePMStoken\", false)\n                  localStorage.setItem(\"BMSCall\", true)\n                  await useJwt.getBMStoken({ username: BMS_USER, password: BMS_PASS }).then(res => {\n                    localStorage.setItem('BMStoken', res.data.jwtToken)\n                    localStorage.setItem(\"BMSCall\", false)\n                  }).catch(err => {\n                    localStorage.setItem(\"BMSCall\", false)\n                    console.log(err)\n                  })\n        \n                  await useJwt.customerbusinesslistbymobileno({ mobile: Number(response.payload.data.user_info.mobileno) }).then(res => {\n                    console.log(res)\n                    localStorage.setItem('customerBusinesses', JSON.stringify(res.data.payload))\n                    history.push(getHomeRouteForLoggedInUser(data.role))\n                  }).catch(err => {\n                    Error(err)\n                    console.log(err)\n                  })\n                }\n              }\n        \n                  \n                  await useJwt.customerBusinessRegistration({ ...userInput, paymentMethodId: data.paymentMethod.id }).then(async res => {\n                    console.log(res)\n                    const payload1 = res.data.payload\n                    handleServerResponse(payload1)\n                    \n                 }).catch(error => {\n                  setIsLoad(false)\n                  Error(error.response)\n                        // console.log(error.response.data.message)\n                        console.log(error.response)\n                  \n                })\n  \n              // console.log(userInput)\n            // }\n          }).catch(e => {\n            console.log(e)\n          })\n          \n          \n    }\n\n    return (\n        <div className=\"\">\n         \n            <Form\n                action=\"/\"\n                className=\"auth-register-form\"\n                onSubmit={onSubmit}\n            >\n                <Row>\n                    {/* <Col sm='12'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                Card Owner Name\n                            </Label>\n                            <Input\n                                type=\"text\"\n                                value={userInput.businessname}\n                                placeholder=\"John\"\n                                id=\"businessname\"\n                                name=\"businessname\"\n                                onChange={(e) => setUserInput({ ...userInput, businessname: e.target.value })}\n                            />\n                        </FormGroup>\n                    </Col> */}\n                    <Col sm='12'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                Card Number\n                            </Label>\n                            <CardNumberElement\n                                type=\"text\"\n                                value={userInput.card_number}\n                                placeholder=\"1234****\"\n                                id=\"cc-number\"\n                                name=\"businessname\"\n                                options={CARD_ELEMENT_OPTIONS}\n                                onBlur={() => {\n                                    console.log(\"CardNumberElement [blur]\", event.target.value)\n                                  }}\n                                // onChange={(e) => setUserInput({ ...userInput, card_number: e.target.value })}\n                                // onChange={(e) =>  console.log(`card number ${e.target.value}`)}\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col sm='6'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"card-expiry\">\n                                Card Expiry\n                            </Label>\n                            <CardExpiryElement\n                                type=\"text\"\n                                value={userInput.card_expiry}\n                                placeholder=\"MM/YYYY\"\n                                id=\"expiry\"\n                                name=\"expiry\"\n                                options={CARD_ELEMENT_OPTIONS}\n                                // onChange={(e) => setUserInput({ ...userInput, card_expiry: e.target.value })}\n                                // onChange={(e) =>  console.log(`card expiry ${e.target.value}`)}\n\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col sm='6'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                CVC\n                            </Label>\n                            <CardCvcElement\n                                type=\"text\"\n                                value={userInput.card_cvc}\n                                placeholder=\"MM/YYYY\"\n                                id=\"cvc\"\n                                name=\"cvc\"\n                                options={CARD_ELEMENT_OPTIONS}\n                                // onChange={(e) => setUserInput({ ...userInput, card_cvc: e.target.value })}\n                                // onChange={(e) =>  console.log(`card cvc ${e}`)}\n\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col md='12' className='text-center'>\n                            {isLoad ? <Button.Ripple className='ml-2' color='primary' disabled style={{ marginTop: '22px' }}>\n                                <Spinner size='sm' />\n                                <span className='align-middle ml-50'>Loading...</span>\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' style={{ marginTop: '22px' }} type=\"submit\">\n                                <Send size={15} />\n                                <span className='align-middle ml-50'>Submit</span>\n                            </Button.Ripple>}\n\n                        </Col>\n                </Row>\n\n                {/* <Button.Ripple type=\"submit\" block color=\"primary\">\n                    Sign Up\n                </Button.Ripple> */}\n            </Form>\n            </div>\n    )\n}\n\nexport default PaypalCardForm","import { useSkin } from \"@hooks/useSkin\"\nimport useJwt from \"@src/auth/jwt/useJwt\"\nimport { AbilityContext } from \"@src/utility/context/Can\"\nimport \"@styles/base/pages/page-auth.scss\"\nimport { isObjEmpty, selectThemeColors } from \"@utils\"\nimport classnames from \"classnames\"\nimport { Fragment, useContext, useEffect, useRef, useState } from \"react\"\nimport { Plus } from \"react-feather\"\nimport { useForm } from \"react-hook-form\"\nimport { useDispatch } from \"react-redux\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport Select from 'react-select'\nimport {\n    Button, Col, CustomInput,\n    Form,\n    FormGroup,\n    Input,\n    Label,\n    Row,\n    Spinner\n} from \"reactstrap\"\nimport pms from '../../../assets/images/icons/RILAC-Logo.svg'\nimport { PaymentElement, CardNumberElement, CardExpiryElement, CardCvcElement, useStripe, useElements, Elements } from '@stripe/react-stripe-js'\nimport { KeyboardReturn } from \"@mui/icons-material\"\nimport { loadStripe } from \"@stripe/stripe-js\"\nimport PaypalCardForm from \"./PaypalCardForm\"\n\n\nconst CreditCardDetails = () => {\n    const ability = useContext(AbilityContext)\n\n    const [skin, setSkin] = useSkin()\n\n    const history = useHistory()\n\n    const dispatch = useDispatch()\n\n    const { register, errors, handleSubmit, trigger } = useForm()\n\n    const [valErrors, setValErrors] = useState({})\n    const [docerror, setdocerror] = useState({})\n    const [stripePromise, setStripePromise] = useState('')\n    const [isLoad, setIsLoad] = useState(false)\n    const [amount, setAmount] = useState(0)\n    // let stripe = useStripe()\n    // let elements = useElements()\n    const childFunc = useRef(null)\n\n    const [userInput, setUserInput] = useState({\n        ...JSON.parse(localStorage.getItem('registration_data')),\n        // businessname: '',\n        // email: '',\n        // mobile: '',\n        // password: '',\n        // country: 'UK',\n        // businesscategoryids: 0,\n        // status: 1,\n        // logo: '',\n        // city: '',\n        // city_id: 0,\n        // web_login: true,\n        // card_name: '',\n        // card_number: '',\n        // card_address: '',\n        // card_expiry: '',\n        // card_cvc: '',\n        payment_method_id: 2\n\n    })\n\n    useEffect(async () => {\n        console.log(\"start use effect\")\n        useJwt.stripeData().then(async res => {\n            const payload1 = res.data.payload\n            setStripePromise(loadStripe(payload1.publishableKey))\n            setIsLoad(true)\n            console.log(payload1)\n            console.log(\"inside then use effect\")\n\n        }).catch(err => {\n            console.log(\"inside catch use effect\")\n            console.log(err)\n            Error(err)\n        })\n        // setAmount(parseFloat(localStorage.getItem('amount')))\n        setAmount(parseFloat(50))\n    }, [])\n\n    const illustration =\n        skin === \"dark\" ? \"register-v2-dark.svg\" : \"register-v2.svg\",\n        source = require(`@src/assets/images/pages/${illustration}`).default\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n        // console.log({\n        //     mobile: mobileNumber,\n        //     email,\n        //     firstname: firstName,\n        //     lastname: lastName\n        // })\n        // if (isObjEmpty(errors)) {\n        //     useJwt\n        //         .merchentregister({\n        //             mobile: mobileNumber,\n        //             email,\n        //             firstname: firstName,\n        //             lastname: lastName\n        //         })\n        //         .then((res) => {\n        //             console.log(res.data, res.data.payload, \"showing response\")\n\n        //             if (\n        //                 res.data.issuccess &&\n        //                 res.data.payload.mobile_match &&\n        //                 res.data.payload.is_registered\n        //             ) {\n        //                 history.push(\"/login\")\n        //             } else if (\n        //                 res.data.issuccess &&\n        //                 res.data.payload.mobile_match &&\n        //                 res.data.payload.is_registered === false\n        //             ) {\n        //                 localStorage.setItem(\"mobilenumber\", mobileNumber)\n        //                 history.push(\"/merchantsetpassword\")\n        //             }\n        //         })\n        //         .catch((err) => console.log(err))\n        // }\n\n        setIsLoad(true)\n\n        if (!stripe || !elements) {\n            // Stripe.js has not yet loaded.\n            // Make sure to disable form submission until Stripe.js has loaded.\n            setIsLoad(false)\n            return\n        }\n\n        const paymentMethodObj = {\n            type: 'card',\n            card: elements.getElement(CardNumberElement)\n            // billing_details: {\n            //   name\n            // }\n          }\n          console.log(paymentMethodObj)\n          const paymentMethodResult = await stripe.createPaymentMethod(paymentMethodObj)\n          console.log(paymentMethodResult) \n\n          const handleServerResponse = async (response) => {\n            if (response.error) {\n              // Show error from server on payment form\n              setIsLoad(false)\n              alert(response.error)\n            } else if (response.requiresAction) {\n              // Use Stripe.js to handle the required card action\n              const { error: errorAction, paymentIntent } =\n                await stripe.handleCardAction(response.clientSecret)\n              if (errorAction) {\n                // Show error from Stripe.js in payment form\n                setIsLoad(false)\n                alert(errorAction)\n              } else {\n                // The card action has been handled\n                // The PaymentIntent can be confirmed again on the server\n                useJwt.payByStripe(\n                  {\n                    paymentIntentId: paymentIntent?.id\n                  }).then(async res => {\n                    const payload1 = res.data.payload\n                    handleServerResponse(payload1)\n                  }).catch(err => {\n                    Error(err)\n                  })\n              }\n            } else {\n              // Show success message\n              setIsLoad(false)\n              handleSuccessAlert()\n            }\n          }\n\n          useJwt.customerBusinessRegistration({...userinput}).then(async res => {\n            console.log(res)\n            const payload1 = res.data.payload\n            handleServerResponse(payload1)\n            \n         }).catch(error => {\n            setLoader(false)\n            Error(error.response)\n                // console.log(error.response.data.message)\n                console.log(error.response)\n          \n        })\n\n        //   useJwt.payByStripe(\n        //     {\n        //       useStripeSdk: true,\n        //       paymentIntentId: null,\n        //       paymentMethodId: paymentMethodResult.paymentMethod.id,\n        //       currency: \"gbp\",\n        //       amount\n        //     }).then(async res => {\n        //       const payload1 = res.data.payload\n        //       handleServerResponse(payload1)\n        //     }).catch(err => {\n        //       Error(err)\n        //     })\n          \n    }\n\n    return (\n        <div className=\"\">\n            {isLoad ? <Elements stripe={stripePromise}>\n         \n            <PaypalCardForm amount={amount} childFunc={childFunc} ></PaypalCardForm>\n            {/* <Form\n                action=\"/\"\n                className=\"auth-register-form\"\n                onSubmit={onSubmit}\n            >\n                <Row>\n                    <Col sm='12'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                Card Owner Name\n                            </Label>\n                            <Input\n                                type=\"text\"\n                                value={userInput.businessname}\n                                placeholder=\"John\"\n                                id=\"businessname\"\n                                name=\"businessname\"\n                                onChange={(e) => setUserInput({ ...userInput, businessname: e.target.value })}\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col sm='12'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                Card Number\n                            </Label>\n                            <CardNumberElement\n                                type=\"text\"\n                                value={userInput.card_number}\n                                placeholder=\"1234****\"\n                                id=\"cc-number\"\n                                name=\"businessname\"\n                                onChange={(e) => setUserInput({ ...userInput, businessname: e.target.value })}\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col sm='6'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"card-expiry\">\n                                Card Expiry\n                            </Label>\n                            <CardExpiryElement\n                                type=\"text\"\n                                value={userInput.card_expiry}\n                                placeholder=\"MM/YYYY\"\n                                id=\"expiry\"\n                                name=\"expiry\"\n                                onChange={(e) => setUserInput({ ...userInput, card_expiry: e.target.value })}\n                            />\n                        </FormGroup>\n                    </Col>\n                    <Col sm='6'>\n                        <FormGroup>\n                            <Label className=\"form-label\" for=\"businessname\">\n                                CVC\n                            </Label>\n                            <CardCvcElement\n                                type=\"text\"\n                                value={userInput.card_cvc}\n                                placeholder=\"MM/YYYY\"\n                                id=\"cvc\"\n                                name=\"cvc\"\n                                onChange={(e) => setUserInput({ ...userInput, card_cvc: e.target.value })}\n                            />\n                        </FormGroup>\n                    </Col>\n                </Row>\n\n                <Button.Ripple type=\"submit\" block color=\"primary\">\n                    Sign Up\n                </Button.Ripple>\n            </Form> */}\n            <p className=\"text-center mt-2\">\n                <span className=\"mr-25\">Already have an account?</span>\n                <Link to=\"/login\">\n                    <span>Sign in instead</span>\n                </Link>\n            </p>\n            </Elements > : <div className='d-flex justify-content-center'>\n                <Spinner className='mt-5'/>\n            </div>\n            }        \n            </div>\n    )\n}\n\nexport default CreditCardDetails","import React, { useState } from 'react'\nimport {\n  Card, CardBody, Col, Nav, NavItem, NavLink, Row, TabContent, TabPane\n} from 'reactstrap'\nimport { Link, useHistory } from \"react-router-dom\"\nimport pms from '../../../assets/images/icons/RILAC-Logo.svg'\nimport CreditCardDetails from './AddCreditCard'\nimport GoCardless from './GoCardless'\n\nconst CardDetails = () => {\n  const [activeTab, setActiveTab] = useState('1')\n  const toggle = tab => setActiveTab(tab)\n  const userData = JSON.parse(localStorage.getItem('registration_data'))\n  return (\n    <Card style={{ maxWidth: \"768px\" }} className=\"mx-auto my-4\">\n      <CardBody className='pt-2'>\n        <Nav pills className=\"border-bottom pb-1\">\n          <NavItem>\n            <NavLink active={activeTab === '1'} onClick={() => toggle('1')}>\n              <span className='align-middle d-none d-sm-block'>Credit Card Details</span>\n            </NavLink>\n          </NavItem>\n         {\n          userData.country === \"UK\" &&  <NavItem>\n          <NavLink active={activeTab === '2'} onClick={() => toggle('2')}>\n            <span className='align-middle d-none d-sm-block'>Go-Cardless Details</span>\n          </NavLink>\n        </NavItem>\n         }\n        </Nav>\n        <TabContent activeTab={activeTab}>\n          <TabPane tabId='1'>\n            <CreditCardDetails />\n          </TabPane>\n          <TabPane tabId='2'>\n            <GoCardless />\n          </TabPane>\n        </TabContent>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CardDetails\n","import { Fragment, useState } from 'react'\nimport { toast, Slide } from 'react-toastify'\n\n    export const Error = (err) => {\n        try {\n            const e = err.response\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500 || e.status === 409) {\n                toast.error(e.data.message, {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n            } else  {\n                toast.error('The server is under maintenance', {\n                    position: \"top-right\",\n                    autoClose: 5000,\n                    hideProgressBar: false,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined\n                    }) \n            }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        }\n \n    }\n\n    export const ErrorMessage = (err) => {\n        try {\n        const e = err.response\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n         }\n        } catch (e) {\n            toast.error('Please check your connection', {\n                position: \"top-right\",\n                autoClose: 5000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined\n                })  \n        } \n    }\n    export const Success = (response) => {\n        const message = response.data.message || 'success'\n        toast.success(message, {\n            position: \"top-right\",\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n            })  \n    }\n\n"],"sourceRoot":""}